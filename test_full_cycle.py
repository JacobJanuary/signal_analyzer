#!/usr/bin/env python3
"""Test full signal processing cycle."""
from database.models import SignalRecord
from main import SignalEnrichmentProcessor
from database.connection import get_db_cursor
from utils.logger import setup_logger

logger = setup_logger(__name__)


def create_test_signal(symbol: str) -> int:
    """Create a test signal in signals_10min table."""
    print(f"\nüìù –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —Å–∏–≥–Ω–∞–ª–∞ –¥–ª—è {symbol}...")

    with get_db_cursor() as cursor:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Ç–∞–±–ª–∏—Ü—ã signals_10min
        cursor.execute("SHOW COLUMNS FROM signals_10min")
        columns = cursor.fetchall()
        print("\n–°—Ç—Ä—É–∫—Ç—É—Ä–∞ —Ç–∞–±–ª–∏—Ü—ã signals_10min:")
        for col in columns[:5]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 5 –∫–æ–ª–æ–Ω–æ–∫
            print(f"  - {col['Field']}: {col['Type']}")

        # –°–æ–∑–¥–∞–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω—É—é –∑–∞–ø–∏—Å—å
        cursor.execute("""
                       INSERT INTO signals_10min (symbol)
                       VALUES (%s)
                       """, (symbol,))

        signal_id = cursor.lastrowid
        print(f"‚úÖ –°–æ–∑–¥–∞–Ω —Å–∏–≥–Ω–∞–ª ID: {signal_id}")
        return signal_id


def test_full_processing(symbol: str):
    """Test full processing for a symbol."""
    print(f"\nüîÑ –ü–æ–ª–Ω—ã–π —Ç–µ—Å—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–ª—è {symbol}")
    print("=" * 60)

    # 1. –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π —Å–∏–≥–Ω–∞–ª
    signal_id = create_test_signal(symbol)

    try:
        # 2. –ó–∞–ø—É—Å–∫–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É
        print("\nüöÄ –ó–∞–ø—É—Å–∫ –æ–±—Ä–∞–±–æ—Ç–∫–∏...")
        processor = SignalEnrichmentProcessor()
        processed = processor.process_new_signals()

        print(f"\n‚úÖ –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ —Å–∏–≥–Ω–∞–ª–æ–≤: {processed}")

        # 3. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        print("\nüìä –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –≤ –ë–î...")
        with get_db_cursor() as cursor:
            cursor.execute("""
                           SELECT signal_id,
                                  symbol,
                                  oi_source_usdt,
                                  oi_usdt_current,
                                  spot_volume_source_usdt,
                                  spot_volume_usdt_current,
                                  spot_price_source_usdt,
                                  spot_price_usdt_current,
                                  created_at
                           FROM signals_10min_enriched
                           WHERE signal_id = %s
                           """, (signal_id,))

            result = cursor.fetchone()

            if result:
                print("\n‚úÖ –î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã:")
                print(f"   Signal ID: {result['signal_id']}")
                print(f"   Symbol: {result['symbol']}")
                print(f"   Created: {result['created_at']}")

                print("\n   üìà Open Interest:")
                print(f"      Source: {result['oi_source_usdt'] or 'N/A'}")
                print(f"      Current: ${float(result['oi_usdt_current']):,.2f}" if result[
                    'oi_usdt_current'] else "      Current: N/A")

                print("\n   üìä Spot Volume:")
                print(f"      Source: {result['spot_volume_source_usdt'] or 'N/A'}")
                print(f"      Current: ${float(result['spot_volume_usdt_current']):,.2f}" if result[
                    'spot_volume_usdt_current'] else "      Current: N/A")

                print("\n   üí∞ Spot Price:")
                print(f"      Source: {result['spot_price_source_usdt'] or 'N/A'}")
                print(f"      Current: ${float(result['spot_price_usdt_current']):,.2f}" if result[
                    'spot_price_usdt_current'] else "      Current: N/A")
            else:
                print("‚ùå –î–∞–Ω–Ω—ã–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ —Ç–∞–±–ª–∏—Ü–µ enriched")

    finally:
        # 4. –û—á–∏—Å—Ç–∫–∞
        print("\nüßπ –û—á–∏—Å—Ç–∫–∞ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö...")
        with get_db_cursor() as cursor:
            cursor.execute("DELETE FROM signals_10min WHERE id = %s", (signal_id,))
            cursor.execute("DELETE FROM signals_10min_enriched WHERE signal_id = %s", (signal_id,))
            print("‚úÖ –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ —É–¥–∞–ª–µ–Ω—ã")


def test_multiple_symbols():
    """Test multiple symbols with different sources."""
    symbols = [
        ('BTC', 'Should use Binance/Bybit'),
        ('KOMA', 'Should use CoinMarketCap'),
        ('SKYAI', 'Should use CoinMarketCap'),
    ]

    for symbol, description in symbols:
        print(f"\n\n{'=' * 60}")
        print(f"üß™ –¢–µ—Å—Ç: {symbol} - {description}")
        print(f"{'=' * 60}")
        test_full_processing(symbol)


if __name__ == "__main__":
    print("üîß –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–ª–Ω–æ–≥–æ —Ü–∏–∫–ª–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–∏–≥–Ω–∞–ª–æ–≤")
    print("=" * 60)

    choice = input("""
–í—ã–±–µ—Ä–∏—Ç–µ —Ç–µ—Å—Ç:
1. –¢–µ—Å—Ç –æ–¥–Ω–æ–≥–æ —Å–∏–º–≤–æ–ª–∞
2. –¢–µ—Å—Ç –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö —Å–∏–º–≤–æ–ª–æ–≤ (BTC, KOMA, SKYAI)

–í–∞—à –≤—ã–±–æ—Ä (1-2): """)

    if choice == "1":
        symbol = input("–í–≤–µ–¥–∏—Ç–µ —Å–∏–º–≤–æ–ª –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: ").strip().upper()
        if symbol:
            test_full_processing(symbol)
    elif choice == "2":
        test_multiple_symbols()