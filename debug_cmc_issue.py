#!/usr/bin/env python3
"""Debug exact issue with CoinMarketCap data processing."""
from api_clients.coinmarketcap_client import CoinMarketCapClient
from datetime import datetime, timedelta, timezone
import traceback


def test_step_by_step():
    """Test CoinMarketCap step by step."""
    print("üîç –ü–æ—à–∞–≥–æ–≤–∞—è –æ—Ç–ª–∞–¥–∫–∞ CoinMarketCap")
    print("=" * 60)

    cmc = CoinMarketCapClient()
    symbol = 'KOMA'

    print(f"–¢–µ—Å—Ç–∏—Ä—É–µ–º: {symbol}")
    print("-" * 40)

    # –®–∞–≥ 1: –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
    print("\n1Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏:")
    if cmc.is_configured():
        print("‚úÖ API –∫–ª—é—á –Ω–∞—Å—Ç—Ä–æ–µ–Ω")
    else:
        print("‚ùå API –∫–ª—é—á –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω")
        return

    # –®–∞–≥ 2: –ü–æ–ª—É—á–µ–Ω–∏–µ token_id
    print("\n2Ô∏è‚É£ –ü–æ–ª—É—á–µ–Ω–∏–µ token_id –∏–∑ –ë–î:")
    token_id = cmc.get_token_id_from_db(symbol)
    if token_id:
        print(f"‚úÖ Token ID: {token_id}")
    else:
        print("‚ùå Token ID –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ë–î")

    # –®–∞–≥ 3: –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ—Å–ª–µ–¥–Ω–µ–π –∫–æ—Ç–∏—Ä–æ–≤–∫–∏
    print("\n3Ô∏è‚É£ –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ—Å–ª–µ–¥–Ω–µ–π –∫–æ—Ç–∏—Ä–æ–≤–∫–∏:")
    try:
        latest = cmc.get_latest_quote(symbol)
        if latest:
            print("‚úÖ –ö–æ—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ–ª—É—á–µ–Ω–∞")
            if 'quote' in latest and 'USD' in latest['quote']:
                usd = latest['quote']['USD']
                print(f"   –¶–µ–Ω–∞: ${usd.get('price', 0):.8f}")
                print(f"   –û–±—ä–µ–º: ${usd.get('volume_24h', 0):,.2f}")
        else:
            print("‚ùå –ö–æ—Ç–∏—Ä–æ–≤–∫–∞ –Ω–µ –ø–æ–ª—É—á–µ–Ω–∞")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        traceback.print_exc()

    # –®–∞–≥ 4: –ü–æ–ª—É—á–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö
    print("\n4Ô∏è‚É£ –ü–æ–ª—É—á–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö:")
    end_time = datetime.now(timezone.utc)
    start_time = end_time - timedelta(days=31)

    try:
        # –°–Ω–∞—á–∞–ª–∞ —Ç–µ—Å—Ç–∏—Ä—É–µ–º get_historical_quotes_v2 –Ω–∞–ø—Ä—è–º—É—é
        print("   –¢–µ—Å—Ç get_historical_quotes_v2:")
        historical_v2 = cmc.get_historical_quotes_v2(
            symbol, start_time, end_time, 'daily', token_id
        )
        if historical_v2:
            print(f"   ‚úÖ –ü–æ–ª—É—á–µ–Ω–æ –∑–∞–ø–∏—Å–µ–π: {len(historical_v2)}")
        else:
            print("   ‚ùå –î–∞–Ω–Ω—ã–µ –Ω–µ –ø–æ–ª—É—á–µ–Ω—ã")

        # –ó–∞—Ç–µ–º —Ç–µ—Å—Ç–∏—Ä—É–µ–º –æ–±–µ—Ä—Ç–∫—É get_historical_quotes
        print("\n   –¢–µ—Å—Ç get_historical_quotes:")
        historical = cmc.get_historical_quotes(
            symbol, start_time, end_time, 'daily', 31
        )
        if historical:
            print(f"   ‚úÖ –ü–æ–ª—É—á–µ–Ω–æ –∑–∞–ø–∏—Å–µ–π: {len(historical)}")
        else:
            print("   ‚ùå –î–∞–Ω–Ω—ã–µ –Ω–µ –ø–æ–ª—É—á–µ–Ω—ã")

    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        traceback.print_exc()

    # –®–∞–≥ 5: –ü–æ–ª—É—á–µ–Ω–∏–µ market_data
    print("\n5Ô∏è‚É£ –ü–æ–ª—É—á–µ–Ω–∏–µ market_data:")
    try:
        market_data = cmc.get_market_data_for_symbol(symbol)
        if market_data:
            print("‚úÖ Market data –ø–æ–ª—É—á–µ–Ω—ã:")
            for key, value in market_data.items():
                if isinstance(value, float):
                    print(f"   {key}: ${value:,.2f}")
                else:
                    print(f"   {key}: {value}")
        else:
            print("‚ùå Market data –Ω–µ –ø–æ–ª—É—á–µ–Ω—ã")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        traceback.print_exc()


def test_spot_processor_debug():
    """Debug spot processor."""
    print("\n\nüîç –û—Ç–ª–∞–¥–∫–∞ SpotUSDTProcessor")
    print("=" * 60)

    from modules.spot_usdt_processor import SpotUSDTProcessor

    processor = SpotUSDTProcessor()
    symbol = 'KOMA'

    print(f"–û–±—Ä–∞–±–æ—Ç–∫–∞ {symbol}:")
    print("-" * 40)

    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –º–µ—Ç–æ–¥ _process_coinmarketcap –Ω–∞–ø—Ä—è–º—É—é
    print("\n–¢–µ—Å—Ç _process_coinmarketcap –Ω–∞–ø—Ä—è–º—É—é:")
    try:
        result = processor._process_coinmarketcap(symbol)
        if result.error:
            print(f"‚ùå –û—à–∏–±–∫–∞: {result.error}")
        else:
            print(f"‚úÖ –£—Å–ø–µ—à–Ω–æ!")
            print(f"   –ò—Å—Ç–æ—á–Ω–∏–∫: {result.source_exchange.value}")
            print(
                f"   –¢–µ–∫—É—â–∏–π –æ–±—ä–µ–º: ${result.current_volume_usdt:,.2f}" if result.current_volume_usdt else "   –¢–µ–∫—É—â–∏–π –æ–±—ä–µ–º: None")
            print(
                f"   –¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞: ${result.current_price_usdt:.8f}" if result.current_price_usdt else "   –¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞: None")
    except Exception as e:
        print(f"‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ: {e}")
        traceback.print_exc()


def test_direct_v2_with_our_client():
    """Test v2 API directly with our base client."""
    print("\n\nüîç –ü—Ä—è–º–æ–π —Ç–µ—Å—Ç v2 API —á–µ—Ä–µ–∑ –Ω–∞—à –±–∞–∑–æ–≤—ã–π –∫–ª–∏–µ–Ω—Ç")
    print("=" * 60)

    from api_clients.base import BaseAPIClient
    from config.settings import settings

    # –°–æ–∑–¥–∞–µ–º –∫–ª–∏–µ–Ω—Ç —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º –±–∞–∑–æ–≤—ã–º URL
    client = BaseAPIClient('https://pro-api.coinmarketcap.com')
    client.session.headers.update({
        'X-CMC_PRO_API_KEY': settings.COINMARKETCAP_API_KEY,
        'Accept': 'application/json'
    })

    symbol = 'KOMA'
    end_time = datetime.now(timezone.utc)
    start_time = end_time - timedelta(days=31)

    params = {
        'symbol': symbol.upper(),
        'time_start': start_time.isoformat(),
        'time_end': end_time.isoformat(),
        'interval': 'daily',
        'convert': 'USD'
    }

    print(f"–ó–∞–ø—Ä–æ—Å –∫: /v2/cryptocurrency/quotes/historical")
    print(f"–ü–∞—Ä–∞–º–µ—Ç—Ä—ã: {params}")

    response = client._make_request('/v2/cryptocurrency/quotes/historical', params)

    if response:
        print("‚úÖ –û—Ç–≤–µ—Ç –ø–æ–ª—É—á–µ–Ω")
        if 'data' in response:
            tokens = response['data'].get(symbol.upper(), [])
            print(f"–ù–∞–π–¥–µ–Ω–æ —Ç–æ–∫–µ–Ω–æ–≤: {len(tokens)}")
            if tokens and len(tokens) > 0:
                token = tokens[0]
                print(f"–¢–æ–∫–µ–Ω: {token.get('name')} (ID: {token.get('id')})")
                print(f"–ö–æ—Ç–∏—Ä–æ–≤–æ–∫: {len(token.get('quotes', []))}")
        else:
            print("‚ùå –ù–µ—Ç 'data' –≤ –æ—Ç–≤–µ—Ç–µ")
    else:
        print("‚ùå –û—Ç–≤–µ—Ç –Ω–µ –ø–æ–ª—É—á–µ–Ω")


if __name__ == "__main__":
    # 1. –ü–æ—à–∞–≥–æ–≤–∞—è –æ—Ç–ª–∞–¥–∫–∞
    test_step_by_step()

    # 2. –û—Ç–ª–∞–¥–∫–∞ –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–∞
    test_spot_processor_debug()

    # 3. –ü—Ä—è–º–æ–π —Ç–µ—Å—Ç —á–µ—Ä–µ–∑ –±–∞–∑–æ–≤—ã–π –∫–ª–∏–µ–Ω—Ç
    test_direct_v2_with_our_client()