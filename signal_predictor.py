#!/usr/bin/env python3
"""
Signal Predictor - –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –æ–±—É—á–µ–Ω–Ω—ã—Ö –º–æ–¥–µ–ª–µ–π –¥–ª—è –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è –Ω–æ–≤—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤
"""

import pandas as pd
import numpy as np
from sqlalchemy import create_engine, text
from datetime import datetime
import json
import os
from typing import Dict
from dotenv import load_dotenv
from urllib.parse import quote_plus
import joblib
import warnings

warnings.filterwarnings('ignore')

load_dotenv()


class SignalPredictor:
    """
    –ü—Ä–µ–¥—Å–∫–∞–∑–∞—Ç–µ–ª—å —É—Å–ø–µ—à–Ω–æ—Å—Ç–∏ —Å–∏–≥–Ω–∞–ª–æ–≤ –Ω–∞ –æ—Å–Ω–æ–≤–µ –æ–±—É—á–µ–Ω–Ω—ã—Ö –º–æ–¥–µ–ª–µ–π.
    """

    def __init__(self, models_dir: str = 'models'):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–µ–¥—Å–∫–∞–∑–∞—Ç–µ–ª—è."""
        self.engine = self._create_db_connection()
        self.models_dir = models_dir
        self.models = self._load_models()
        self.scaler = joblib.load(os.path.join(models_dir, 'scaler.pkl'))

        with open(os.path.join(models_dir, 'feature_names.json'), 'r') as f:
            self.feature_names = json.load(f)

        print(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(self.models)} –º–æ–¥–µ–ª–µ–π")

    def _create_db_connection(self):
        """–°–æ–∑–¥–∞–µ—Ç –∏ –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö."""
        # –£–õ–£–ß–®–ï–ù–û: –ö–æ–¥ –∏–¥–µ–Ω—Ç–∏—á–µ–Ω –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä—É, –≤ —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–æ–µ–∫—Ç–µ
        # –µ–≥–æ —Å—Ç–æ–∏–ª–æ –±—ã –≤—ã–Ω–µ—Å—Ç–∏ –≤ –æ–±—â–∏–π –º–æ–¥—É–ª—å.
        try:
            user = os.getenv('DB_USER')
            password = quote_plus(os.getenv('DB_PASSWORD', ''))
            host = os.getenv('DB_HOST')
            port = os.getenv('DB_PORT', 3306)
            database = os.getenv('DB_NAME')

            if not all([user, password, host, database]):
                raise ValueError("–ù–µ –≤—Å–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î –∑–∞–¥–∞–Ω—ã.")

            connection_string = f"mysql+pymysql://{user}:{password}@{host}:{port}/{database}"
            engine = create_engine(connection_string, pool_pre_ping=True)
            with engine.connect() as conn:
                conn.execute(text("SELECT 1"))
            return engine
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î: {e}")
            raise

    def _load_models(self) -> Dict:
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –æ–±—É—á–µ–Ω–Ω—ã–µ –º–æ–¥–µ–ª–∏ –∏–∑ —É–∫–∞–∑–∞–Ω–Ω–æ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏."""
        models = {}
        model_files = [
            'random_forest_model.pkl', 'xgboost_model.pkl',
            'lightgbm_model.pkl', 'neural_network_model.pkl'
        ]
        for model_file in model_files:
            model_path = os.path.join(self.models_dir, model_file)
            if os.path.exists(model_path):
                model_name = model_file.replace('_model.pkl', '')
                models[model_name] = joblib.load(model_path)
                print(f"  - –ó–∞–≥—Ä—É–∂–µ–Ω–∞ –º–æ–¥–µ–ª—å: {model_name}")
        return models

    def get_recent_signals(self, hours: int = 24) -> pd.DataFrame:
        """–ü–æ–ª—É—á–∞–µ—Ç –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Å–∏–≥–Ω–∞–ª—ã, –∏—Å–ø–æ–ª—å–∑—É—è –±–µ–∑–æ–ø–∞—Å–Ω—ã–π –ø–∞—Ä–∞–º–µ—Ç—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã–π –∑–∞–ø—Ä–æ—Å."""

        # –£–õ–£–ß–®–ï–ù–û: –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–∏–∑–æ–≤–∞–Ω–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞ –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
        query = text("""
                     SELECT s.id as signal_id_from_db,
                            s.token_id,
                            s.symbol,
                            s.timestamp,
                            s.OI_contracts_binance_now,
                            s.OI_contracts_binance_prev,
                            s.OI_contracts_binance_change,
                            s.OI_contracts_bybit_now,
                            s.OI_contracts_bybit_prev,
                            s.OI_contracts_bybit_change,
                            s.funding_rate_binance_now,
                            s.funding_rate_binance_prev,
                            s.funding_rate_binance_change,
                            s.funding_rate_bybit_now,
                            s.funding_rate_bybit_prev,
                            s.funding_rate_bybit_change,
                            s.volume_usd,
                            s.price_usd_now,
                            s.price_usd_prev,
                            s.price_usd_change,
                            s.market_cap_usd,
                            e.*
                     FROM signals_10min s
                              LEFT JOIN signals_10min_enriched e ON s.id = e.signal_id
                     WHERE s.timestamp >= DATE_SUB(NOW(), INTERVAL :hours_ago HOUR)
                       AND s.OI_contracts_binance_change > 0
                     ORDER BY s.timestamp DESC
                     """)

        df = pd.read_sql(query, self.engine, params={"hours_ago": hours})
        df = df.loc[:, ~df.columns.duplicated()]

        if df.empty:
            return df

        return self._add_technical_features(df)

    def _add_technical_features(self, df: pd.DataFrame) -> pd.DataFrame:
        """–î–æ–±–∞–≤–ª—è–µ—Ç —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –ø—Ä–∏–∑–Ω–∞–∫–∏, –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –¥–ª—è –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è."""

        # –ò–°–ü–†–ê–í–õ–ï–ù–û: –ë–ª–æ–∫ –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∏—è –ø–µ—Ä–µ–Ω–µ—Å–µ–Ω –≤ –Ω–∞—á–∞–ª–æ —Ñ—É–Ω–∫—Ü–∏–∏,
        # —á—Ç–æ–±—ã —Å—Ç–æ–ª–±—Ü—ã –±—ã–ª–∏ –¥–æ—Å—Ç—É–ø–Ω—ã –¥–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–∏—Ö –≤—ã—á–∏—Å–ª–µ–Ω–∏–π.
        rename_map = {
            'timestamp': 'signal_timestamp',
            'price_usd_now': 'signal_price',
            'price_usd_change': 'price_change_10min',
            'volume_usd': 'signal_volume_usd'
        }
        df = df.rename(columns=rename_map)

        # –£–õ–£–ß–®–ï–ù–û: pd.to_datetime –≤—ã–∑—ã–≤–∞–µ—Ç—Å—è –æ–¥–∏–Ω —Ä–∞–∑ –¥–ª—è —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
        dt_series = pd.to_datetime(df['signal_timestamp'])
        df['hour'] = dt_series.dt.hour
        df['day_of_week'] = dt_series.dt.dayofweek
        df['is_weekend'] = df['day_of_week'].isin([5, 6]).astype(int)

        df['oi_binance_bybit_ratio'] = df['OI_contracts_binance_change'] / (df['OI_contracts_bybit_change'] + 0.001)
        df['funding_binance_bybit_ratio'] = df['funding_rate_binance_now'] / (df['funding_rate_bybit_now'] + 1e-5)

        df['price_momentum'] = df['spot_price_usdt_change_1h'] * df['spot_price_usdt_change_24h']

        df['volatility_1h'] = ((df['cmc_price_max_1h'] - df['cmc_price_min_1h']) / df['signal_price'] * 100).fillna(0)
        df['volatility_24h'] = ((df['cmc_price_max_24h'] - df['cmc_price_min_24h']) / df['signal_price'] * 100).fillna(
            0)

        df['signal_strength'] = (
                df['OI_contracts_binance_change'] * 0.4 +
                df['OI_contracts_bybit_change'] * 0.3 +
                df['spot_volume_usdt_change_current_to_average'] * 0.2 +
                df['price_change_10min'] * 0.1
        ).fillna(0)

        return df

    def predict_signals(self, df: pd.DataFrame) -> pd.DataFrame:
        """–î–µ–ª–∞–µ—Ç –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è –¥–ª—è –Ω–æ–≤—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤, –∏—Å–ø–æ–ª—å–∑—É—è –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–µ –º–æ–¥–µ–ª–∏."""
        if df.empty:
            return df

        print(f"\nüîÆ –ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ –¥–ª—è {len(df)} —Å–∏–≥–Ω–∞–ª–æ–≤...")

        # –£–õ–£–ß–®–ï–ù–û: –ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –ø—Ä–æ–ø—É—Å–∫–æ–≤ –º–µ–¥–∏–∞–Ω–æ–π, –∫–∞–∫ –≤ –æ–±—É—á–∞—é—â–µ–º —Å–∫—Ä–∏–ø—Ç–µ
        X = df[self.feature_names].fillna(df[self.feature_names].median())
        X_scaled = self.scaler.transform(X)

        for model_name, model in self.models.items():
            input_data = X_scaled if model_name == 'neural_network' else X
            df[f'pred_{model_name}'] = model.predict(input_data)
            df[f'proba_{model_name}'] = model.predict_proba(input_data)[:, 1]

        proba_cols = [f'proba_{name}' for name in self.models.keys()]
        # –£–õ–£–ß–®–ï–ù–û: –ò—Å–∫–ª—é—á–∞–µ–º —Å–ª–∞–±—É—é –Ω–µ–π—Ä–æ—Å–µ—Ç—å –∏–∑ –∞–Ω—Å–∞–º–±–ª—è –¥–ª—è –ø–æ–≤—ã—à–µ–Ω–∏—è –∫–∞—á–µ—Å—Ç–≤–∞
        if 'proba_neural_network' in proba_cols:
            proba_cols.remove('proba_neural_network')

        df['proba_ensemble'] = df[proba_cols].mean(axis=1)
        df['pred_ensemble'] = (df['proba_ensemble'] > 0.5).astype(int)

        pred_cols = [f'pred_{name}' for name in self.models.keys()]
        if 'pred_neural_network' in pred_cols:
            pred_cols.remove('pred_neural_network')

        df['models_agree_count'] = df[pred_cols].sum(axis=1)
        df['all_models_agree'] = (df['models_agree_count'] == len(pred_cols)).astype(int)

        return df

    def generate_trading_signals(self, df: pd.DataFrame, min_probability: float = 0.6,
                                 min_models_agree: int = 2) -> pd.DataFrame:
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∏ —Ñ–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Ç–æ—Ä–≥–æ–≤—ã–µ —Å–∏–≥–Ω–∞–ª—ã –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–π."""
        if df.empty:
            return df

        strong_signals = df[
            (df['proba_ensemble'] >= min_probability) &
            (df['models_agree_count'] >= min_models_agree)
            ].copy()

        strong_signals = strong_signals.sort_values('proba_ensemble', ascending=False)

        strong_signals['recommendation'] = strong_signals['proba_ensemble'].apply(
            lambda x: 'STRONG BUY' if x >= 0.8 else 'BUY' if x >= 0.7 else 'CONSIDER'
        )

        strong_signals['suggested_stop_loss'] = strong_signals['signal_price'] * 0.97  # -3%
        strong_signals['suggested_take_profit'] = strong_signals['signal_price'] * 1.05  # +5%

        return strong_signals

    def display_signals(self, signals: pd.DataFrame, top_n: int = 10):
        """–û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç —Ç–æ–ø N —Å–∏–≥–Ω–∞–ª–æ–≤ –≤ —É–¥–æ–±–Ω–æ–º –¥–ª—è —á—Ç–µ–Ω–∏—è —Ñ–æ—Ä–º–∞—Ç–µ."""
        print(f"\nüìä –¢–û–ü-{min(top_n, len(signals))} –°–ò–õ–¨–ù–´–• –°–ò–ì–ù–ê–õ–û–í:")
        print("=" * 120)

        if signals.empty:
            print("–ù–µ—Ç —Å–∏–ª—å–Ω—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è.")
            return

        for _, signal in signals.head(top_n).iterrows():
            print(f"\n{'=' * 60}")
            print(f"ü™ô  {signal['symbol']} | {signal['recommendation']}")
            print(f"üìÖ  {signal['signal_timestamp'].strftime('%Y-%m-%d %H:%M:%S')}")
            print(f"üí∞  –¶–µ–Ω–∞ –≤ –º–æ–º–µ–Ω—Ç —Å–∏–≥–Ω–∞–ª–∞: ${signal['signal_price']:.4f}")
            print(
                f"üìà  OI Change: Binance {signal.get('OI_contracts_binance_change', 'N/A'):.1f} | Bybit {signal.get('OI_contracts_bybit_change', 'N/A'):.1f}")
            print(f"üéØ  –í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å —É—Å–ø–µ—Ö–∞: {signal['proba_ensemble']:.1%}")
            print(f"ü§ù  –°–æ–≥–ª–∞—Å–∏–µ –º–æ–¥–µ–ª–µ–π: {int(signal['models_agree_count'])}/{len(self.models) - 1}")
            print("-" * 30)
            print(f"üõ°Ô∏è  Stop Loss (—Ä–µ–∫–æ–º–µ–Ω–¥.): ${signal['suggested_stop_loss']:.4f} (-3%)")
            print(f"üèÜ  Take Profit (—Ä–µ–∫–æ–º–µ–Ω–¥.): ${signal['suggested_take_profit']:.4f} (+5%)")

            print("\n   –î–µ—Ç–∞–ª–∏–∑–∞—Ü–∏—è –ø–æ –º–æ–¥–µ–ª—è–º:")
            for model_name in self.models.keys():
                if model_name != 'neural_network':
                    print(f"   - {model_name:<15}: {signal[f'proba_{model_name}']:.1%}")

    def save_predictions(self, df: pd.DataFrame, strong_signals: pd.DataFrame):
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –≤—Å–µ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è –∏ –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã–µ —Å–∏–ª—å–Ω—ã–µ —Å–∏–≥–Ω–∞–ª—ã."""
        output_dir = 'predictions'
        os.makedirs(output_dir, exist_ok=True)

        timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
        all_filename = os.path.join(output_dir, f'predictions_all_{timestamp}.csv')
        strong_filename = os.path.join(output_dir, f'predictions_strong_{timestamp}.csv')

        df.to_csv(all_filename, index=False)
        print(f"\nüíæ –í—Å–µ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã: {all_filename}")

        strong_signals.to_csv(strong_filename, index=False)
        print(f"üíæ –°–∏–ª—å–Ω—ã–µ —Å–∏–≥–Ω–∞–ª—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã: {strong_filename}")


def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –ø—Ä–µ–¥—Å–∫–∞–∑–∞—Ç–µ–ª—è –∏–∑ –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏."""
    import argparse

    parser = argparse.ArgumentParser(description='–ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ—Å—Ç–∏ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–Ω—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤')
    parser.add_argument('--hours', type=int, default=24, help='–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —á–∞—Å–æ–≤ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 24)')
    parser.add_argument('--min-probability', type=float, default=0.6,
                        help='–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –¥–ª—è —Å–∏–≥–Ω–∞–ª–∞ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 0.6)')
    parser.add_argument('--min-models', type=int, default=2,
                        help='–ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–≥–ª–∞—Å–Ω—ã—Ö –º–æ–¥–µ–ª–µ–π (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 2)')
    parser.add_argument('--top', type=int, default=10, help='–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–ø —Å–∏–≥–Ω–∞–ª–æ–≤ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 10)')
    parser.add_argument('--save', action='store_true', help='–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è –≤ —Ñ–∞–π–ª')

    args = parser.parse_args()

    try:
        predictor = SignalPredictor()

        print(f"\nüì° –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–∏–≥–Ω–∞–ª–æ–≤ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ {args.hours} —á–∞—Å–æ–≤...")
        recent_signals = predictor.get_recent_signals(hours=args.hours)

        if recent_signals.empty:
            print("‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–æ –Ω–æ–≤—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞.")
            return

        print(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ {len(recent_signals)} –Ω–æ–≤—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤")

        predictions = predictor.predict_signals(recent_signals)

        trading_signals = predictor.generate_trading_signals(
            predictions,
            min_probability=args.min_probability,
            min_models_agree=args.min_models
        )

        if not trading_signals.empty:
            predictor.display_signals(trading_signals, top_n=args.top)
        else:
            print("\n‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–æ —Å–∏–≥–Ω–∞–ª–æ–≤, —É–¥–æ–≤–ª–µ—Ç–≤–æ—Ä—è—é—â–∏—Ö –∫—Ä–∏—Ç–µ—Ä–∏—è–º (p > "
                  f"{args.min_probability}, —Å–æ–≥–ª–∞—Å–∏–µ >= {args.min_models}).")

        if args.save:
            predictor.save_predictions(predictions, trading_signals)

        print(f"\nüìä –ò–¢–û–ì–û–í–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê:")
        print(f"–í—Å–µ–≥–æ –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ: {len(predictions)}")
        print(f"–ù–∞–π–¥–µ–Ω–æ —Å–∏–ª—å–Ω—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤: {len(trading_signals)}")
        if not trading_signals.empty:
            print("–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å–∏–ª—å–Ω—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤ –ø–æ —Ç–æ–∫–µ–Ω–∞–º:")
            print(trading_signals['symbol'].value_counts().head(5))

    except Exception as e:
        print(f"\n‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: {e}")
        import traceback
        traceback.print_exc()


if __name__ == "__main__":
    main()