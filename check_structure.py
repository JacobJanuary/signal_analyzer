#!/usr/bin/env python3
"""Check project structure and create missing files."""
import os
from pathlib import Path

# –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –ø—Ä–æ–µ–∫—Ç–∞
PROJECT_STRUCTURE = {
    'api_clients': ['__init__.py', 'base.py', 'binance_client.py', 'bybit_client.py'],
    'config': ['__init__.py', 'settings.py'],
    'database': ['__init__.py', 'connection.py', 'models.py'],
    'modules': ['__init__.py', 'oi_processor.py'],
    'tests': ['__init__.py', 'test_oi_processor.py'],
    'utils': ['__init__.py', 'logger.py', 'helpers.py'],
}

ROOT_FILES = ['.env.example', 'requirements.txt', 'main.py', 'pytest.ini', 'conftest.py']


def check_structure():
    """Check and report project structure."""
    print("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –ø—Ä–æ–µ–∫—Ç–∞...\n")

    missing_dirs = []
    missing_files = []

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –∏ —Ñ–∞–π–ª—ã
    for directory, files in PROJECT_STRUCTURE.items():
        dir_path = Path(directory)

        if not dir_path.exists():
            missing_dirs.append(directory)
            print(f"‚ùå –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç: {directory}/")
        else:
            print(f"‚úÖ –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: {directory}/")

        for file in files:
            file_path = dir_path / file
            if not file_path.exists():
                missing_files.append(str(file_path))
                print(f"   ‚ùå –§–∞–π–ª –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç: {file_path}")
            else:
                print(f"   ‚úÖ –§–∞–π–ª —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: {file_path}")

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ—Ä–Ω–µ–≤—ã–µ —Ñ–∞–π–ª—ã
    print("\nüìÅ –ö–æ—Ä–Ω–µ–≤—ã–µ —Ñ–∞–π–ª—ã:")
    for file in ROOT_FILES:
        if not Path(file).exists():
            missing_files.append(file)
            print(f"‚ùå –§–∞–π–ª –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç: {file}")
        else:
            print(f"‚úÖ –§–∞–π–ª —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: {file}")

    # –ò—Ç–æ–≥–∏
    print("\n" + "=" * 50)
    if missing_dirs or missing_files:
        print("‚ùó –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏–µ —ç–ª–µ–º–µ–Ω—Ç—ã:")
        if missing_dirs:
            print(f"\n–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏: {len(missing_dirs)}")
            for d in missing_dirs:
                print(f"  - {d}/")
        if missing_files:
            print(f"\n–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏–µ —Ñ–∞–π–ª—ã: {len(missing_files)}")
            for f in missing_files:
                print(f"  - {f}")

        print("\nüí° –°–æ–∑–¥–∞–π—Ç–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏–µ —Ñ–∞–π–ª—ã –∏–∑ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω–æ–≥–æ –∫–æ–¥–∞.")
    else:
        print("‚úÖ –í—Å–µ —Ñ–∞–π–ª—ã –∏ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –Ω–∞ –º–µ—Å—Ç–µ!")
        print("\nüöÄ –ì–æ—Ç–æ–≤–æ –∫ –∑–∞–ø—É—Å–∫—É:")
        print("   python main.py")
        print("\nüß™ –î–ª—è –∑–∞–ø—É—Å–∫–∞ —Ç–µ—Å—Ç–æ–≤:")
        print("   pytest tests/ -v")
        print("\nüìä –î–ª—è –∑–∞–ø—É—Å–∫–∞ —Ç–µ—Å—Ç–æ–≤ —Å –ø–æ–∫—Ä—ã—Ç–∏–µ–º:")
        print("   pytest tests/ --cov=modules --cov-report=html")


if __name__ == "__main__":
    check_structure()