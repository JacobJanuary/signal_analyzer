import pandas as pd
import seaborn as sns
import matplotlib.pyplot as plt
import xgboost as xgb  # <<< –ò–ó–ú–ï–ù–ï–ù–ò–ï: –∏–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º xgboost
from sklearn.model_selection import train_test_split
from sklearn.metrics import classification_report, confusion_matrix
from sklearn.impute import SimpleImputer

# --- –ù–ê–°–¢–†–û–ô–ö–ò ---
# –£–∫–∞–∂–∏—Ç–µ –∏–º—è –≤–∞—à–µ–≥–æ —Ñ–∞–π–ª–∞ —Å –¥–∞–Ω–Ω—ã–º–∏
PARQUET_FILENAME = 'full_ai_dataset_2025-06-12_1543.parquet' # <--- –ó–ê–ú–ï–ù–ò–¢–ï –ù–ê –ò–ú–Ø –í–ê–®–ï–ì–û –§–ê–ô–õ–ê

# --- 1. –ó–ê–ì–†–£–ó–ö–ê –ò –ü–û–î–ì–û–¢–û–í–ö–ê –î–ê–ù–ù–´–• ---
try:
    df = pd.read_parquet(PARQUET_FILENAME)
    print(f"‚úÖ –§–∞–π–ª '{PARQUET_FILENAME}' —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω. –í—Å–µ–≥–æ —Å–∏–≥–Ω–∞–ª–æ–≤ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞: {len(df)}")
except FileNotFoundError:
    print(f"‚ùå –û—à–∏–±–∫–∞: –§–∞–π–ª '{PARQUET_FILENAME}' –Ω–µ –Ω–∞–π–¥–µ–Ω.")
    exit()

df.dropna(subset=['max_profit_pct', 'max_drawdown_pct'], inplace=True)
print(f"–û—Å—Ç–∞–ª–æ—Å—å —Å–∏–≥–Ω–∞–ª–æ–≤ –ø–æ—Å–ª–µ –æ—á–∏—Å—Ç–∫–∏: {len(df)}")

df['is_successful'] = ((df['did_hit_profit_target_5pct'] == 1) & (df['did_hit_stop_loss_3pct'] == 0)).astype(int)

y = df['is_successful']
columns_to_drop = [
    'signal_id', 'symbol', 'timestamp', 'enriched_id', 'created_at', 'updated_at',
    'timeseries_to_max_profit', 'timeseries_to_stop_loss',
    'is_successful', 'did_hit_profit_target_5pct', 'did_hit_stop_loss_3pct',
    'max_profit_pct', 'max_drawdown_pct', 'time_to_max_profit_minutes'
]
X_raw = df.drop(columns=columns_to_drop, errors='ignore')
X = pd.get_dummies(X_raw, dummy_na=True)
feature_names = X.columns
imputer = SimpleImputer(strategy='median')
X = imputer.fit_transform(X)

class_counts = y.value_counts()
print("\n–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å–∏–≥–Ω–∞–ª–æ–≤:")
print(class_counts)


# --- 2. –†–ê–ó–î–ï–õ–ï–ù–ò–ï –î–ê–ù–ù–´–• –ò –û–ë–£–ß–ï–ù–ò–ï –ú–û–î–ï–õ–ò ---
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42, stratify=y)

# <<< –ò–ó–ú–ï–ù–ï–ù–ò–ï: –°–æ–∑–¥–∞–Ω–∏–µ –∏ –æ–±—É—á–µ–Ω–∏–µ –º–æ–¥–µ–ª–∏ XGBoost >>>

print("\nüöÄ –û–±—É—á–µ–Ω–∏–µ –º–æ–¥–µ–ª–∏ XGBoost...")

# –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –≤–µ—Å –¥–ª—è –±–æ—Ä—å–±—ã —Å –¥–∏—Å–±–∞–ª–∞–Ω—Å–æ–º –∫–ª–∞—Å—Å–æ–≤
# –≠—Ç–æ —Å–∫–∞–∂–µ—Ç –º–æ–¥–µ–ª–∏ —É–¥–µ–ª—è—Ç—å –±–æ–ª—å—à–µ –≤–Ω–∏–º–∞–Ω–∏—è —Ä–µ–¥–∫–∏–º "—É—Å–ø–µ—à–Ω—ã–º" —Å–∏–≥–Ω–∞–ª–∞–º
scale_pos_weight = class_counts[0] / class_counts[1] if class_counts[1] > 0 else 1

model = xgb.XGBClassifier(
    objective='binary:logistic',
    n_estimators=150,          # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–µ—Ä–µ–≤—å–µ–≤
    learning_rate=0.1,         # –°–∫–æ—Ä–æ—Å—Ç—å –æ–±—É—á–µ–Ω–∏—è
    max_depth=5,               # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –≥–ª—É–±–∏–Ω–∞ –∫–∞–∂–¥–æ–≥–æ –¥–µ—Ä–µ–≤–∞
    scale_pos_weight=scale_pos_weight, # –í–∞–∂–Ω—ã–π –ø–∞—Ä–∞–º–µ—Ç—Ä –¥–ª—è –¥–∏—Å–±–∞–ª–∞–Ω—Å–∞!
    use_label_encoder=False,
    eval_metric='logloss',
    random_state=42,
    n_jobs=-1
)

model.fit(X_train, y_train)
print("–ú–æ–¥–µ–ª—å –æ–±—É—á–µ–Ω–∞!")


# --- 3. –û–¶–ï–ù–ö–ê –ö–ê–ß–ï–°–¢–í–ê –ú–û–î–ï–õ–ò ---
print("\n--- –û—Ü–µ–Ω–∫–∞ –∫–∞—á–µ—Å—Ç–≤–∞ –º–æ–¥–µ–ª–∏ XGBoost –Ω–∞ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö ---")
y_pred = model.predict(X_test)

print("\n–ú–∞—Ç—Ä–∏—Ü–∞ –æ—à–∏–±–æ–∫:")
cm = confusion_matrix(y_test, y_pred)
sns.heatmap(cm, annot=True, fmt='d', cmap='Blues', xticklabels=['–ù–µ—É—Å–ø–µ—à–Ω—ã–π', '–£—Å–ø–µ—à–Ω—ã–π'], yticklabels=['–ù–µ—É—Å–ø–µ—à–Ω—ã–π', '–£—Å–ø–µ—à–Ω—ã–π'])
plt.title('–ú–∞—Ç—Ä–∏—Ü–∞ –æ—à–∏–±–æ–∫ (XGBoost)')
plt.ylabel('–ò—Å—Ç–∏–Ω–Ω—ã–π –∫–ª–∞—Å—Å')
plt.xlabel('–ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–Ω—ã–π –∫–ª–∞—Å—Å')
plt.savefig('xgboost_confusion_matrix.png') # –ù–æ–≤–æ–µ –∏–º—è —Ñ–∞–π–ª–∞
print("üñºÔ∏è  –ú–∞—Ç—Ä–∏—Ü–∞ –æ—à–∏–±–æ–∫ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤ 'xgboost_confusion_matrix.png'")
plt.clf()

print("\n–û—Ç—á–µ—Ç –ø–æ –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏:")
print(classification_report(y_test, y_pred, target_names=['–ù–µ—É—Å–ø–µ—à–Ω—ã–π', '–£—Å–ø–µ—à–Ω—ã–π']))


# --- 4. –í–ê–ñ–ù–û–°–¢–¨ –ü–†–ò–ó–ù–ê–ö–û–í ---
print("\n--- –í–∞–∂–Ω–æ—Å—Ç—å –ø—Ä–∏–∑–Ω–∞–∫–æ–≤ –ø–æ –≤–µ—Ä—Å–∏–∏ XGBoost ---")
feature_importances = pd.Series(model.feature_importances_, index=feature_names).sort_values(ascending=False)

print("–¢–û–ü-15 —Å–∞–º—ã—Ö –≤–∞–∂–Ω—ã—Ö –ø—Ä–∏–∑–Ω–∞–∫–æ–≤:")
print(feature_importances.head(15))

plt.figure(figsize=(12, 10))
sns.barplot(x=feature_importances.head(20), y=feature_importances.head(20).index)
plt.title('–¢–û–ü-20 —Å–∞–º—ã—Ö –≤–∞–∂–Ω—ã—Ö –ø—Ä–∏–∑–Ω–∞–∫–æ–≤ –ø–æ –≤–µ—Ä—Å–∏–∏ XGBoost')
plt.xlabel('–í–∞–∂–Ω–æ—Å—Ç—å')
plt.ylabel('–ü—Ä–∏–∑–Ω–∞–∫–∏')
plt.tight_layout()
plt.savefig('xgboost_feature_importance.png') # –ù–æ–≤–æ–µ –∏–º—è —Ñ–∞–π–ª–∞
print("\nüñºÔ∏è  –ì—Ä–∞—Ñ–∏–∫ –≤–∞–∂–Ω–æ—Å—Ç–∏ –ø—Ä–∏–∑–Ω–∞–∫–æ–≤ —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ 'xgboost_feature_importance.png'")
print("\n‚úÖ –ê–Ω–∞–ª–∏–∑ –∏ –æ–±—É—á–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω—ã.")