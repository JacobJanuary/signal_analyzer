import pandas as pd
import numpy as np
import joblib
import argparse
import sys
import os
from dotenv import load_dotenv
from sqlalchemy import create_engine, text
import urllib.parse


def create_db_engine():
    """–°–æ–∑–¥–∞–µ—Ç –¥–≤–∏–∂–æ–∫ SQLAlchemy —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è."""
    # –£–º–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ .env —Ñ–∞–π–ª–∞ –∏–∑ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏, –≥–¥–µ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è —Å–∞–º —Å–∫—Ä–∏–ø—Ç
    dotenv_path = os.path.join(os.path.dirname(os.path.abspath(__file__)), '.env')
    if os.path.exists(dotenv_path):
        load_dotenv(dotenv_path)
    else:
        # –≠—Ç–∞ —Å—Ç—Ä–æ–∫–∞ –Ω–µ –¥–æ–ª–∂–Ω–∞ –ø–æ—è–≤–∏—Ç—å—Å—è, –µ—Å–ª–∏ .env –ª–µ–∂–∏—Ç —Ä—è–¥–æ–º —Å–æ —Å–∫—Ä–∏–ø—Ç–æ–º
        print(f"‚ùå –ü–†–ï–î–£–ü–†–ï–ñ–î–ï–ù–ò–ï: –Ω–µ –Ω–∞–π–¥–µ–Ω .env —Ñ–∞–π–ª –ø–æ –ø—É—Ç–∏ {dotenv_path}")

    db_user = os.getenv('DB_USER')
    db_password = os.getenv('DB_PASSWORD')
    db_host = os.getenv('DB_HOST')
    db_name = os.getenv('DB_NAME')
    db_port = os.getenv('DB_PORT', '3306')

    if not all([db_user, db_password, db_host, db_name]):
        print("‚ùå –û—à–∏–±–∫–∞: –û–¥–Ω–∞ –∏–ª–∏ –Ω–µ—Å–∫–æ–ª—å–∫–æ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ .env —Ñ–∞–π–ª–µ.")
        print("   –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞–ª–∏—á–∏–µ DB_USER, DB_PASSWORD, DB_HOST, DB_NAME.")
        sys.exit(1)
    try:
        encoded_password = urllib.parse.quote_plus(db_password)
        db_url = f"mysql+pymysql://{db_user}:{encoded_password}@{db_host}:{db_port}/{db_name}"
        return create_engine(db_url)
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –¥–≤–∏–∂–∫–∞ SQLAlchemy: {e}", file=sys.stderr)
        sys.exit(1)


def get_single_signal_data(engine, signal_id: int):
    """–ü–æ–ª—É—á–∞–µ—Ç –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ–¥–Ω–æ–≥–æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Å–∏–≥–Ω–∞–ª–∞."""
    query = text("""
                 SELECT s.*,
                        e.id as enriched_id,
                        e.oi_usdt_average,
                        e.oi_usdt_current,
                        e.oi_usdt_yesterday,
                        e.oi_usdt_change_current_to_yesterday,
                        e.oi_usdt_change_current_to_average,
                        e.oi_source_usdt,
                        e.spot_volume_usdt_average,
                        e.spot_volume_usdt_current,
                        e.spot_volume_usdt_yesterday,
                        e.spot_volume_usdt_change_current_to_yesterday,
                        e.spot_volume_usdt_change_current_to_average,
                        e.spot_volume_source_usdt,
                        e.spot_volume_btc_average,
                        e.spot_volume_btc_current,
                        e.spot_volume_btc_yesterday,
                        e.spot_volume_btc_change_current_to_yesterday,
                        e.spot_volume_btc_change_current_to_average,
                        e.spot_volume_source_btc,
                        e.spot_price_usdt_average,
                        e.spot_price_usdt_current,
                        e.spot_price_usdt_yesterday,
                        e.spot_price_usdt_change_1h,
                        e.spot_price_usdt_change_24h,
                        e.spot_price_usdt_change_7d,
                        e.spot_price_usdt_change_30d,
                        e.spot_price_source_usdt,
                        e.cmc_price_min_1h,
                        e.cmc_price_max_1h,
                        e.cmc_price_min_24h,
                        e.cmc_price_max_24h,
                        e.cmc_price_min_7d,
                        e.cmc_price_max_7d,
                        e.cmc_price_min_30d,
                        e.cmc_price_max_30d,
                        e.cmc_percent_change_1d,
                        e.cmc_percent_change_7d,
                        e.cmc_percent_change_30d
                 FROM signals_10min s
                          LEFT JOIN signals_10min_enriched e ON s.id = e.signal_id
                 WHERE s.id = :signal_id;
                 """)
    df = pd.read_sql(query, engine, params={"signal_id": signal_id})
    if df.empty:
        return None
    df.rename(columns={'id': 'signal_id'}, inplace=True)
    return df


def predict_signal(signal_df: pd.DataFrame, model, imputer, model_features, categorical_features, numeric_features):
    """–ì–æ—Ç–æ–≤–∏—Ç –¥–∞–Ω–Ω—ã–µ –∏ –¥–µ–ª–∞–µ—Ç –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ –¥–ª—è –Ω–æ–≤–æ–≥–æ —Å–∏–≥–Ω–∞–ª–∞."""

    # 1. –û—Ç–±–∏—Ä–∞–µ–º –í–°–ï –ø—Ä–∏–∑–Ω–∞–∫–∏, –∫–æ—Ç–æ—Ä—ã–µ –±—ã–ª–∏ –ø—Ä–∏ –æ–±—É—á–µ–Ω–∏–∏, –∏ —Å–æ–∑–¥–∞–µ–º —è–≤–Ω—É—é –∫–æ–ø–∏—é
    # reindex –≥–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ—Ç, —á—Ç–æ –≤—Å–µ –Ω—É–∂–Ω—ã–µ –∫–æ–ª–æ–Ω–∫–∏ –±—É–¥—É—Ç –Ω–∞ –º–µ—Å—Ç–µ, –¥–∞–∂–µ –µ—Å–ª–∏ –≤ LEFT JOIN –ø—Ä–∏—à–ª–∏ NULL
    X_raw = signal_df.reindex(columns=model_features).copy()

    # 2. –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∞–ª—å–Ω—ã–µ –∫–æ–ª–æ–Ω–∫–∏ –≤ —Ç–∏–ø 'category'
    for col in categorical_features:
        if col in X_raw.columns:
            X_raw[col] = X_raw[col].astype('category')

    # 3. –ü—Ä–∏–º–µ–Ω—è–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–π Imputer –∫ –¢–û–ú–£ –ñ–ï –°–ü–ò–°–ö–£ —á–∏—Å–ª–æ–≤—ã—Ö –∫–æ–ª–æ–Ω–æ–∫
    cols_to_impute = [col for col in numeric_features if col in X_raw.columns]
    X_raw[cols_to_impute] = imputer.transform(X_raw[cols_to_impute])

    # 4. –ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–∏
    # –ü–æ–¥–∞–µ–º –Ω–∞ –≤—Ö–æ–¥ –¥–∞–Ω–Ω—ã–µ —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º –ø–æ—Ä—è–¥–∫–æ–º –∫–æ–ª–æ–Ω–æ–∫
    prediction_proba = model.predict_proba(X_raw[model_features])

    return prediction_proba[0][1]  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –∫–ª–∞—Å—Å–∞ "1" (—É—Å–ø–µ—à–Ω—ã–π)


if __name__ == "__main__":
    parser = argparse.ArgumentParser(description="–ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ—Å—Ç–∏ –∫—Ä–∏–ø—Ç–æ-—Å–∏–≥–Ω–∞–ª–∞.")
    parser.add_argument('--signal_id', type=int, required=True, help='ID —Å–∏–≥–Ω–∞–ª–∞ –∏–∑ —Ç–∞–±–ª–∏—Ü—ã signals_10min –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞.')
    args = parser.parse_args()

    print(f"–ó–∞–≥—Ä—É–∑–∫–∞ –º–æ–¥–µ–ª–∏ –∏ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤...")
    try:
        model = joblib.load('lgbm_model.joblib')
        imputer = joblib.load('imputer.joblib')
        model_features = joblib.load('feature_names.joblib')
        categorical_features = joblib.load('categorical_features.joblib')
        numeric_features = joblib.load('numeric_features.joblib')
        print("‚úÖ –ú–æ–¥–µ–ª—å —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–∞.")
    except FileNotFoundError as e:
        print(
            f"‚ùå –û—à–∏–±–∫–∞: –§–∞–π–ª –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω: {e.filename}. \n   –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–Ω–∞—á–∞–ª–∞ –∑–∞–ø—É—Å—Ç–∏—Ç–µ —Å–∫—Ä–∏–ø—Ç train_lgbm_model.py –¥–ª—è –∏—Ö —Å–æ–∑–¥–∞–Ω–∏—è.")
        sys.exit(1)

    engine = create_db_engine()

    print(f"\n–ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Å–∏–≥–Ω–∞–ª–∞ ID: {args.signal_id}...")
    signal_df = get_single_signal_data(engine, args.signal_id)

    if signal_df is None:
        print(f"‚ùå –°–∏–≥–Ω–∞–ª —Å ID {args.signal_id} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.")
    else:
        print("–î–∞–Ω–Ω—ã–µ –ø–æ–ª—É—á–µ–Ω—ã. –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è...")
        probability_of_success = predict_signal(signal_df, model, imputer, model_features, categorical_features,
                                                numeric_features)

        # –í—ã–≤–æ–¥ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
        print("\n" + "=" * 50)
        print(f"–ê–ù–ê–õ–ò–ó –°–ò–ì–ù–ê–õ–ê #{args.signal_id} ({signal_df['symbol'].iloc[0]})")
        print("=" * 50)
        print(f"–í–ï–†–û–Ø–¢–ù–û–°–¢–¨ –£–°–ü–ï–•–ê: {probability_of_success:.2%}")

        if probability_of_success > 0.65:
            print("\n–†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–Ø: üî• –í–•–û–î–ò–¢–¨ (–í—ã—Å–æ–∫–∞—è –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å)")
        elif probability_of_success > 0.50:
            print("\n–†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–Ø: ü§î –†–ê–°–°–ú–û–¢–†–ï–¢–¨ (–°—Ä–µ–¥–Ω—è—è –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å)")
        else:
            print("\n–†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–Ø: ‚õîÔ∏è –ü–†–û–ü–£–°–¢–ò–¢–¨ (–ù–∏–∑–∫–∞—è –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å)")
        print("=" * 50)