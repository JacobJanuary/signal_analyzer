#!/usr/bin/env python3
"""Final integration test for the complete signal enrichment system."""
from datetime import datetime, timezone
from database.connection import get_db_cursor
from main import SignalEnrichmentProcessor
from utils.logger import setup_logger
import time

logger = setup_logger(__name__)


def create_test_signals():
    """Create test signals for different scenarios."""
    test_cases = [
        # (symbol, token_id, description)
        ('BTC', 1, 'Major crypto - should use Binance/Bybit'),
        ('ETH', 2, 'Major crypto - should use Binance/Bybit'),
        ('KOMA', 3, 'Only on CoinMarketCap'),
        ('SKYAI', 4, 'Only on CoinMarketCap'),
        ('MUBARAK', 5, 'Available on Binance and CoinMarketCap'),
    ]

    created_ids = []

    print("üìù –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤...")
    print("=" * 60)

    try:
        with get_db_cursor() as cursor:
            for symbol, token_id, description in test_cases:
                cursor.execute("""
                               INSERT INTO signals_10min (symbol, token_id)
                               VALUES (%s, %s)
                               """, (symbol, token_id))

                signal_id = cursor.lastrowid
                created_ids.append(signal_id)
                print(f"‚úÖ {symbol:<10} (ID: {signal_id}) - {description}")

        return created_ids

    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å–∏–≥–Ω–∞–ª–æ–≤: {e}")
        return []


def check_enriched_results(signal_ids):
    """Check the enriched results in the database."""
    print("\n\nüìä –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±–æ–≥–∞—â–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö...")
    print("=" * 60)

    with get_db_cursor() as cursor:
        placeholders = ','.join(['%s'] * len(signal_ids))
        cursor.execute(f"""
            SELECT 
                e.*,
                s.symbol
            FROM signals_10min_enriched e
            JOIN signals_10min s ON s.id = e.signal_id
            WHERE e.signal_id IN ({placeholders})
            ORDER BY e.signal_id
        """, signal_ids)

        results = cursor.fetchall()

        if not results:
            print("‚ùå –ù–µ—Ç –æ–±–æ–≥–∞—â–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö")
            return

        for row in results:
            print(f"\n{'=' * 50}")
            print(f"üìà {row['symbol']} (Signal ID: {row['signal_id']})")
            print(f"{'=' * 50}")

            # OI –¥–∞–Ω–Ω—ã–µ
            if row['oi_source_usdt']:
                print(f"\nüíπ Open Interest (–ò—Å—Ç–æ—á–Ω–∏–∫: {row['oi_source_usdt']}):")
                if row['oi_usdt_current']:
                    print(f"   –¢–µ–∫—É—â–∏–π: ${float(row['oi_usdt_current']):,.2f}")
                if row['oi_usdt_average']:
                    print(f"   –°—Ä–µ–¥–Ω–∏–π: ${float(row['oi_usdt_average']):,.2f}")
                if row['oi_usdt_change_current_to_average'] is not None:
                    print(f"   –ò–∑–º–µ–Ω–µ–Ω–∏–µ –∫ —Å—Ä–µ–¥–Ω–µ–º—É: {float(row['oi_usdt_change_current_to_average']):.2f}%")
            else:
                print("\nüíπ Open Interest: –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö")

            # Spot Volume –¥–∞–Ω–Ω—ã–µ
            if row['spot_volume_source_usdt']:
                print(f"\nüìä Spot Volume (–ò—Å—Ç–æ—á–Ω–∏–∫: {row['spot_volume_source_usdt']}):")
                if row['spot_volume_usdt_current']:
                    print(f"   –¢–µ–∫—É—â–∏–π: ${float(row['spot_volume_usdt_current']):,.2f}")
                if row['spot_volume_usdt_average']:
                    print(f"   –°—Ä–µ–¥–Ω–∏–π: ${float(row['spot_volume_usdt_average']):,.2f}")
                if row['spot_volume_usdt_yesterday']:
                    print(f"   –í—á–µ—Ä–∞—à–Ω–∏–π: ${float(row['spot_volume_usdt_yesterday']):,.2f}")
                if row['spot_volume_usdt_change_current_to_yesterday'] is not None:
                    print(f"   –ò–∑–º–µ–Ω–µ–Ω–∏–µ –∫ –≤—á–µ—Ä–∞: {float(row['spot_volume_usdt_change_current_to_yesterday']):.2f}%")
            else:
                print("\nüìä Spot Volume: –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö")

            # Spot Price –¥–∞–Ω–Ω—ã–µ
            if row['spot_price_source_usdt']:
                print(f"\nüí∞ Spot Price (–ò—Å—Ç–æ—á–Ω–∏–∫: {row['spot_price_source_usdt']}):")
                if row['spot_price_usdt_current']:
                    price = float(row['spot_price_usdt_current'])
                    if price > 1:
                        print(f"   –¢–µ–∫—É—â–∞—è: ${price:,.2f}")
                    else:
                        print(f"   –¢–µ–∫—É—â–∞—è: ${price:.8f}")
                if row['spot_price_usdt_change_24h'] is not None:
                    print(f"   –ò–∑–º–µ–Ω–µ–Ω–∏–µ 24h: {float(row['spot_price_usdt_change_24h']):.2f}%")
                if row['spot_price_usdt_change_7d'] is not None:
                    print(f"   –ò–∑–º–µ–Ω–µ–Ω–∏–µ 7d: {float(row['spot_price_usdt_change_7d']):.2f}%")
            else:
                print("\nüí∞ Spot Price: –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö")

        print(f"\n\n‚úÖ –í—Å–µ–≥–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ –∑–∞–ø–∏—Å–µ–π: {len(results)} –∏–∑ {len(signal_ids)}")

        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –∏—Å—Ç–æ—á–Ω–∏–∫–∞–º
        sources = {
            'oi': {},
            'volume': {},
            'price': {}
        }

        for row in results:
            if row['oi_source_usdt']:
                sources['oi'][row['oi_source_usdt']] = sources['oi'].get(row['oi_source_usdt'], 0) + 1
            if row['spot_volume_source_usdt']:
                sources['volume'][row['spot_volume_source_usdt']] = sources['volume'].get(
                    row['spot_volume_source_usdt'], 0) + 1
            if row['spot_price_source_usdt']:
                sources['price'][row['spot_price_source_usdt']] = sources['price'].get(row['spot_price_source_usdt'],
                                                                                       0) + 1

        print("\nüìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –∏—Å—Ç–æ—á–Ω–∏–∫–∞–º:")
        print(f"   OI: {dict(sources['oi'])}")
        print(f"   Volume: {dict(sources['volume'])}")
        print(f"   Price: {dict(sources['price'])}")


def cleanup_test_data(signal_ids):
    """Clean up test data."""
    if not signal_ids:
        return

    print("\n\nüßπ –û—á–∏—Å—Ç–∫–∞ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö...")

    try:
        with get_db_cursor() as cursor:
            placeholders = ','.join(['%s'] * len(signal_ids))

            # –£–¥–∞–ª—è–µ–º –∏–∑ enriched
            cursor.execute(f"""
                DELETE FROM signals_10min_enriched 
                WHERE signal_id IN ({placeholders})
            """, signal_ids)
            enriched_deleted = cursor.rowcount

            # –£–¥–∞–ª—è–µ–º –∏–∑ signals_10min
            cursor.execute(f"""
                DELETE FROM signals_10min 
                WHERE id IN ({placeholders})
            """, signal_ids)
            signals_deleted = cursor.rowcount

            print(f"‚úÖ –£–¥–∞–ª–µ–Ω–æ –∑–∞–ø–∏—Å–µ–π:")
            print(f"   signals_10min_enriched: {enriched_deleted}")
            print(f"   signals_10min: {signals_deleted}")

    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ: {e}")


def run_integration_test():
    """Run the complete integration test."""
    print("üöÄ –§–ò–ù–ê–õ–¨–ù–´–ô –ò–ù–¢–ï–ì–†–ê–¶–ò–û–ù–ù–´–ô –¢–ï–°–¢")
    print("=" * 60)
    print(f"–í—Ä–µ–º—è –Ω–∞—á–∞–ª–∞: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
    print("=" * 60)

    signal_ids = []

    try:
        # 1. –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ —Å–∏–≥–Ω–∞–ª—ã
        signal_ids = create_test_signals()

        if not signal_ids:
            print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Ç–µ—Å—Ç–æ–≤—ã–µ —Å–∏–≥–Ω–∞–ª—ã")
            return

        # 2. –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞
        print("\n‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ 2 —Å–µ–∫—É–Ω–¥—ã...")
        time.sleep(2)

        # 3. –ó–∞–ø—É—Å–∫–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É
        print("\nüîÑ –ó–∞–ø—É—Å–∫ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–∏–≥–Ω–∞–ª–æ–≤...")
        print("-" * 60)

        start_time = time.time()
        processor = SignalEnrichmentProcessor()
        processed_count = processor.process_new_signals()
        processing_time = time.time() - start_time

        print(f"\n‚úÖ –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞:")
        print(f"   –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ —Å–∏–≥–Ω–∞–ª–æ–≤: {processed_count}")
        print(f"   –í—Ä–µ–º—è –æ–±—Ä–∞–±–æ—Ç–∫–∏: {processing_time:.2f} —Å–µ–∫")
        print(f"   –°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –Ω–∞ —Å–∏–≥–Ω–∞–ª: {processing_time / processed_count:.2f} —Å–µ–∫" if processed_count > 0 else "")

        # 4. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        check_enriched_results(signal_ids)

    except Exception as e:
        print(f"\n‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        import traceback
        traceback.print_exc()

    finally:
        # 5. –û—á–∏—Å—Ç–∫–∞
        if signal_ids and input("\n\n–û—á–∏—Å—Ç–∏—Ç—å —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ? (y/n): ").lower() == 'y':
            cleanup_test_data(signal_ids)

    print("\n" + "=" * 60)
    print(f"–¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
    print("=" * 60)


if __name__ == "__main__":
    run_integration_test()