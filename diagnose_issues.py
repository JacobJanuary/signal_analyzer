#!/usr/bin/env python3
"""Diagnose issues with database saving and CoinMarketCap."""
from database.connection import get_db_cursor
from database.models import EnrichedSignalData, signal_repository
from api_clients.coinmarketcap_client import CoinMarketCapClient
from datetime import datetime, timezone
import traceback


def check_database_structure():
    """Check if all required columns exist in the table."""
    print("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã —Ç–∞–±–ª–∏—Ü—ã signals_10min_enriched")
    print("=" * 60)

    try:
        with get_db_cursor() as cursor:
            cursor.execute("""
                           SELECT COLUMN_NAME, DATA_TYPE, IS_NULLABLE, COLUMN_DEFAULT
                           FROM INFORMATION_SCHEMA.COLUMNS
                           WHERE TABLE_SCHEMA = DATABASE()
                             AND TABLE_NAME = 'signals_10min_enriched'
                           ORDER BY ORDINAL_POSITION
                           """)

            columns = cursor.fetchall()

            print(f"–ù–∞–π–¥–µ–Ω–æ –∫–æ–ª–æ–Ω–æ–∫: {len(columns)}\n")

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞–∂–Ω—ã–µ –∫–æ–ª–æ–Ω–∫–∏
            important_columns = [
                'signal_id', 'symbol', 'created_at',
                'spot_volume_usdt_average', 'spot_volume_usdt_current',
                'spot_volume_usdt_yesterday', 'spot_volume_usdt_change_current_to_yesterday',
                'spot_volume_usdt_change_current_to_average', 'spot_volume_source_usdt',
                'spot_price_usdt_average', 'spot_price_usdt_current',
                'spot_price_usdt_yesterday', 'spot_price_source_usdt'
            ]

            existing_columns = {col['COLUMN_NAME'] for col in columns}

            print("–ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–∞–∂–Ω—ã—Ö –∫–æ–ª–æ–Ω–æ–∫:")
            for col_name in important_columns:
                if col_name in existing_columns:
                    print(f"‚úÖ {col_name}")
                else:
                    print(f"‚ùå {col_name} - –û–¢–°–£–¢–°–¢–í–£–ï–¢!")

    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã: {e}")
        traceback.print_exc()


def test_minimal_save():
    """Test saving minimal data."""
    print("\n\nüß™ –¢–µ—Å—Ç –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–≥–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è")
    print("=" * 60)

    # –°–æ–∑–¥–∞–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω—É—é –∑–∞–ø–∏—Å—å
    minimal_data = EnrichedSignalData(
        signal_id=888888,
        symbol="TEST_MINIMAL",
        created_at=datetime.now(timezone.utc)
    )

    print("–ü–æ–ø—ã—Ç–∫–∞ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ...")
    print(f"  signal_id: {minimal_data.signal_id}")
    print(f"  symbol: {minimal_data.symbol}")
    print(f"  created_at: {minimal_data.created_at}")

    try:
        # –ü—Ä—è–º–æ–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —á–µ—Ä–µ–∑ SQL –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
        with get_db_cursor() as cursor:
            cursor.execute("""
                           INSERT INTO signals_10min_enriched (signal_id, symbol, created_at)
                           VALUES (%s, %s, %s)
                           """, (minimal_data.signal_id, minimal_data.symbol, minimal_data.created_at))

            print("‚úÖ –ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ!")

            # –£–¥–∞–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤—É—é –∑–∞–ø–∏—Å—å
            cursor.execute("DELETE FROM signals_10min_enriched WHERE signal_id = 888888")

    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏: {e}")
        traceback.print_exc()


def test_foreign_key_constraint():
    """Check if foreign key constraint is the issue."""
    print("\n\nüîç –ü—Ä–æ–≤–µ—Ä–∫–∞ Foreign Key –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π")
    print("=" * 60)

    try:
        with get_db_cursor() as cursor:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ FK constraint
            cursor.execute("""
                           SELECT CONSTRAINT_NAME,
                                  COLUMN_NAME,
                                  REFERENCED_TABLE_NAME,
                                  REFERENCED_COLUMN_NAME
                           FROM INFORMATION_SCHEMA.KEY_COLUMN_USAGE
                           WHERE TABLE_SCHEMA = DATABASE()
                             AND TABLE_NAME = 'signals_10min_enriched'
                             AND REFERENCED_TABLE_NAME IS NOT NULL
                           """)

            constraints = cursor.fetchall()

            if constraints:
                print("–ù–∞–π–¥–µ–Ω—ã Foreign Key –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è:")
                for constraint in constraints:
                    print(
                        f"  - {constraint['COLUMN_NAME']} -> {constraint['REFERENCED_TABLE_NAME']}.{constraint['REFERENCED_COLUMN_NAME']}")

                print("\n‚ö†Ô∏è  –≠—Ç–æ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—Ä–∏—á–∏–Ω–æ–π –æ—à–∏–±–∫–∏!")
                print("–î–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∑–∞–ø–∏—Å–∏ signal_id –¥–æ–ª–∂–µ–Ω —Å—É—â–µ—Å—Ç–≤–æ–≤–∞—Ç—å –≤ —Ç–∞–±–ª–∏—Ü–µ signals_10min")
            else:
                print("Foreign Key –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")

    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ FK: {e}")


def test_coinmarketcap_symbols():
    """Test which symbols are available in CoinMarketCap."""
    print("\n\nüîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏–º–≤–æ–ª–æ–≤ –≤ CoinMarketCap")
    print("=" * 60)

    cmc = CoinMarketCapClient()

    if not cmc.is_configured():
        print("‚ùå CoinMarketCap API key –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω")
        return

    # –°–ø–∏—Å–æ–∫ —Å–∏–º–≤–æ–ª–æ–≤ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
    test_symbols = [
        'KOMA', 'KOMAINU', 'KOMA-INU',  # –í–æ–∑–º–æ–∂–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã –¥–ª—è KOMA
        'SKYAI', 'SKY', 'SKYNET',  # –í–æ–∑–º–æ–∂–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã –¥–ª—è SKYAI
        'MUBARAK',  # –≠—Ç–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç –Ω–∞ Binance
        'PEPE', 'SHIB', 'DOGE'  # –ò–∑–≤–µ—Å—Ç–Ω—ã–µ –º–µ–º-–∫–æ–∏–Ω—ã –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
    ]

    print("–ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ —Å–∏–º–≤–æ–ª–æ–≤:\n")

    for symbol in test_symbols:
        symbol_info = cmc.get_symbol_map(symbol)
        if symbol_info:
            print(f"‚úÖ {symbol:<12} - ID: {symbol_info['id']}, Name: {symbol_info['name']}")
        else:
            print(f"‚ùå {symbol:<12} - –ù–µ –Ω–∞–π–¥–µ–Ω")


def test_full_save_with_fk():
    """Test saving with proper foreign key."""
    print("\n\nüß™ –¢–µ—Å—Ç –ø–æ–ª–Ω–æ–≥–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º FK")
    print("=" * 60)

    try:
        with get_db_cursor() as cursor:
            # 1. –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å –≤ signals_10min
            cursor.execute("""
                           INSERT INTO signals_10min (symbol)
                           VALUES ('TEST_CMC')
                           """)
            test_signal_id = cursor.lastrowid
            print(f"‚úÖ –°–æ–∑–¥–∞–Ω —Ç–µ—Å—Ç–æ–≤—ã–π —Å–∏–≥–Ω–∞–ª ID: {test_signal_id}")

            # 2. –°–æ–∑–¥–∞–µ–º –ø–æ–ª–Ω—É—é –∑–∞–ø–∏—Å—å –¥–ª—è enriched
            enriched_data = EnrichedSignalData(
                signal_id=test_signal_id,
                symbol='TEST_CMC',
                created_at=datetime.now(timezone.utc),
                spot_volume_usdt_average=1000000.0,
                spot_volume_usdt_current=1100000.0,
                spot_volume_usdt_yesterday=950000.0,
                spot_volume_usdt_change_current_to_yesterday=15.79,
                spot_volume_usdt_change_current_to_average=10.0,
                spot_volume_source_usdt='coinmarketcap',
                spot_price_usdt_average=100.0,
                spot_price_usdt_current=105.0,
                spot_price_usdt_yesterday=98.0,
                spot_price_source_usdt='coinmarketcap'
            )

            # 3. –°–æ—Ö—Ä–∞–Ω—è–µ–º —á–µ—Ä–µ–∑ repository
            print("\n–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —á–µ—Ä–µ–∑ repository...")
            success = signal_repository.save_enriched_data(enriched_data)

            if success:
                print("‚úÖ –î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã!")

                # –ü—Ä–æ–≤–µ—Ä—è–µ–º
                cursor.execute("""
                               SELECT *
                               FROM signals_10min_enriched
                               WHERE signal_id = %s
                               """, (test_signal_id,))

                saved = cursor.fetchone()
                if saved:
                    print(f"\n–°–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ:")
                    print(f"  Symbol: {saved['symbol']}")
                    print(f"  Source: {saved['spot_volume_source_usdt']}")
                    print(f"  Volume: ${float(saved['spot_volume_usdt_current']):,.2f}")
            else:
                print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —á–µ—Ä–µ–∑ repository")

            # 4. –û—á–∏—Å—Ç–∫–∞
            cursor.execute("DELETE FROM signals_10min_enriched WHERE signal_id = %s", (test_signal_id,))
            cursor.execute("DELETE FROM signals_10min WHERE id = %s", (test_signal_id,))
            print("\n‚úÖ –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –æ—á–∏—â–µ–Ω—ã")

    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        traceback.print_exc()


if __name__ == "__main__":
    print("üîß –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –ø—Ä–æ–±–ª–µ–º —Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º –¥–∞–Ω–Ω—ã—Ö")
    print("=" * 60)

    # 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –ë–î
    check_database_structure()

    # 2. –¢–µ—Å—Ç–∏—Ä—É–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ
    test_minimal_save()

    # 3. –ü—Ä–æ–≤–µ—Ä—è–µ–º FK constraints
    test_foreign_key_constraint()

    # 4. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–∏–º–≤–æ–ª—ã –≤ CoinMarketCap
    test_coinmarketcap_symbols()

    # 5. –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–ª–Ω–æ–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ
    test_full_save_with_fk()