#!/usr/bin/env python3
"""Debug CoinMarketCap integration."""
from modules.spot_usdt_processor import SpotUSDTProcessor
from api_clients.coinmarketcap_client import CoinMarketCapClient
import json


def test_cmc_for_symbol(symbol: str):
    """Test CoinMarketCap for a specific symbol."""
    print(f"\nüîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ CoinMarketCap –¥–ª—è {symbol}")
    print("=" * 60)

    # Test CMC client directly
    cmc = CoinMarketCapClient()

    print(f"\n1. –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ API:")
    print(f"   API –∫–ª—é—á –Ω–∞—Å—Ç—Ä–æ–µ–Ω: {'‚úÖ –î–∞' if cmc.is_configured() else '‚ùå –ù–µ—Ç'}")

    if not cmc.is_configured():
        print("\n‚ùå CoinMarketCap API –∫–ª—é—á –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω –≤ .env —Ñ–∞–π–ª–µ")
        return

    print(f"\n2. –ü–æ–ª—É—á–µ–Ω–∏–µ ID —Å–∏–º–≤–æ–ª–∞:")
    symbol_info = cmc.get_symbol_map(symbol)
    if symbol_info:
        print(f"   ‚úÖ –ù–∞–π–¥–µ–Ω: {symbol_info['name']} (ID: {symbol_info['id']})")
    else:
        print(f"   ‚ùå –°–∏–º–≤–æ–ª {symbol} –Ω–µ –Ω–∞–π–¥–µ–Ω –Ω–∞ CoinMarketCap")
        return

    print(f"\n3. –ü–æ–ª—É—á–µ–Ω–∏–µ —Ä—ã–Ω–æ—á–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö:")
    market_data = cmc.get_market_data_for_symbol(symbol)
    if market_data:
        print(f"   ‚úÖ –î–∞–Ω–Ω—ã–µ –ø–æ–ª—É—á–µ–Ω—ã:")
        print(f"   - –°—Ä–µ–¥–Ω–∏–π –æ–±—ä–µ–º (30–¥): ${market_data['avg_volume_usd']:,.2f}")
        print(f"   - –¢–µ–∫—É—â–∏–π –æ–±—ä–µ–º: ${market_data['current_volume_usd']:,.2f}")
        print(f"   - –í—á–µ—Ä–∞—à–Ω–∏–π –æ–±—ä–µ–º: ${market_data.get('yesterday_volume_usd', 0):,.2f}")
        print(f"   - –°—Ä–µ–¥–Ω—è—è —Ü–µ–Ω–∞ (30–¥): ${market_data['avg_price_usd']:,.2f}")
        print(f"   - –¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞: ${market_data['current_price_usd']:,.2f}")
        print(f"   - –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ—á–µ–∫ –¥–∞–Ω–Ω—ã—Ö: {market_data['data_points']}")
    else:
        print(f"   ‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ä—ã–Ω–æ—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ")

    print(f"\n4. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —á–µ—Ä–µ–∑ SpotUSDTProcessor:")
    processor = SpotUSDTProcessor()
    result = processor.process_symbol(symbol)

    if result.error:
        print(f"   ‚ùå –û—à–∏–±–∫–∞: {result.error}")
    else:
        print(f"   ‚úÖ –û–±—Ä–∞–±–æ—Ç–∫–∞ —É—Å–ø–µ—à–Ω–∞!")
        print(f"   - –ò—Å—Ç–æ—á–Ω–∏–∫: {result.source_exchange.value}")
        print(
            f"   - –û–±—ä–µ–º (—Å—Ä–µ–¥–Ω–∏–π): ${result.avg_volume_usdt:,.2f}" if result.avg_volume_usdt else "   - –û–±—ä–µ–º (—Å—Ä–µ–¥–Ω–∏–π): None")
        print(
            f"   - –û–±—ä–µ–º (—Ç–µ–∫—É—â–∏–π): ${result.current_volume_usdt:,.2f}" if result.current_volume_usdt else "   - –û–±—ä–µ–º (—Ç–µ–∫—É—â–∏–π): None")
        print(
            f"   - –¶–µ–Ω–∞ (—Å—Ä–µ–¥–Ω—è—è): ${result.avg_price_usdt:,.2f}" if result.avg_price_usdt else "   - –¶–µ–Ω–∞ (—Å—Ä–µ–¥–Ω—è—è): None")
        print(
            f"   - –¶–µ–Ω–∞ (—Ç–µ–∫—É—â–∞—è): ${result.current_price_usdt:,.2f}" if result.current_price_usdt else "   - –¶–µ–Ω–∞ (—Ç–µ–∫—É—â–∞—è): None")


def test_problematic_symbols():
    """Test symbols that are failing."""
    symbols = ['KOMA', 'MUBARAK']

    for symbol in symbols:
        test_cmc_for_symbol(symbol)
        print("\n" + "-" * 80)


def test_latest_quote(symbol: str):
    """Test getting latest quote from CMC."""
    print(f"\nüîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ latest quote –¥–ª—è {symbol}")

    cmc = CoinMarketCapClient()
    if not cmc.is_configured():
        print("‚ùå API –∫–ª—é—á –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω")
        return

    quote = cmc.get_latest_quote(symbol)
    if quote:
        print(f"‚úÖ Quote –ø–æ–ª—É—á–µ–Ω:")
        print(json.dumps(quote, indent=2))
    else:
        print(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å quote")


if __name__ == "__main__":
    print("üß™ –û—Ç–ª–∞–¥–∫–∞ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å CoinMarketCap")
    print("=" * 80)

    # Test problematic symbols
    test_problematic_symbols()

    # Test a known symbol
    print("\n\nüìä –¢–µ—Å—Ç —Å –∏–∑–≤–µ—Å—Ç–Ω—ã–º —Å–∏–º–≤–æ–ª–æ–º (BTC):")
    test_cmc_for_symbol('BTC')

    # Test latest quote
    print("\n\nüìä –¢–µ—Å—Ç latest quote:")
    test_latest_quote('KOMA')