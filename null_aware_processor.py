#!/usr/bin/env python3
"""
Null-Aware Enhanced Processor - –ò–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ NULL –∫–∞–∫ –∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–≤–Ω—ã—Ö –ø—Ä–∏–∑–Ω–∞–∫–æ–≤
"""

import pandas as pd
import numpy as np
from typing import Dict, List, Tuple, Optional, Any


class NullAwareFeatureEngineering:
    """
    –ö–ª–∞—Å—Å –¥–ª—è –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏ NULL –∑–Ω–∞—á–µ–Ω–∏–π –∫–∞–∫ –∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–≤–Ω—ã—Ö –ø—Ä–∏–∑–Ω–∞–∫–æ–≤
    """

    def __init__(self):
        # –ì—Ä—É–ø–ø—ã –ø—Ä–∏–∑–Ω–∞–∫–æ–≤, –≥–¥–µ NULL –∏–º–µ–µ—Ç —Å–º—ã—Å–ª–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
        self.btc_volume_features = [
            'spot_volume_btc_average', 'spot_volume_btc_current',
            'spot_volume_btc_yesterday', 'spot_volume_btc_change_current_to_yesterday',
            'spot_volume_btc_change_current_to_average'
        ]

        self.spot_features = [
            'spot_volume_usdt_average', 'spot_volume_usdt_current',
            'spot_volume_usdt_yesterday', 'spot_volume_usdt_change_current_to_yesterday',
            'spot_volume_usdt_change_current_to_average', 'spot_price_usdt_average',
            'spot_price_usdt_current', 'spot_price_usdt_yesterday',
            'spot_price_usdt_change_1h', 'spot_price_usdt_change_24h',
            'spot_price_usdt_change_7d', 'spot_price_usdt_change_30d'
        ]

    def create_null_indicator_features(self, df: pd.DataFrame) -> pd.DataFrame:
        """
        –°–æ–∑–¥–∞–µ—Ç –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–Ω—ã–µ –ø—Ä–∏–∑–Ω–∞–∫–∏ –¥–ª—è NULL –∑–Ω–∞—á–µ–Ω–∏–π
        """
        print("üîç –°–æ–∑–¥–∞–Ω–∏–µ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–Ω—ã—Ö –ø—Ä–∏–∑–Ω–∞–∫–æ–≤ –¥–ª—è NULL –∑–Ω–∞—á–µ–Ω–∏–π...")

        # 1. –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä –Ω–∞–ª–∏—á–∏—è BTC –ø–∞—Ä—ã
        df['has_btc_pair'] = (~df['spot_volume_btc_current'].isna()).astype(int)

        # 2. –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä –Ω–∞–ª–∏—á–∏—è —Å–ø–æ—Ç–æ–≤–æ–π —Ç–æ—Ä–≥–æ–≤–ª–∏
        df['has_spot_trading'] = (~df['spot_volume_usdt_current'].isna()).astype(int)

        # 3. –¢–∏–ø —Ç–æ—Ä–≥–æ–≤–ª–∏ —Ç–æ–∫–µ–Ω–∞
        df['trading_type'] = 0  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é
        df.loc[df['has_spot_trading'] == 1, 'trading_type'] = 1  # –¢–æ–ª—å–∫–æ —Å–ø–æ—Ç
        # –ò–°–ü–†–ê–í–õ–ï–ù–û: 'volume_usd' –∑–∞–º–µ–Ω–µ–Ω–æ –Ω–∞ 'signal_volume_usd'
        df.loc[(df['has_spot_trading'] == 1) & (~df['signal_volume_usd'].isna()), 'trading_type'] = 2  # –°–ø–æ—Ç + —Ñ—å—é—á–µ—Ä—Å—ã
        # –ò–°–ü–†–ê–í–õ–ï–ù–û: 'volume_usd' –∑–∞–º–µ–Ω–µ–Ω–æ –Ω–∞ 'signal_volume_usd'
        df.loc[(df['has_spot_trading'] == 0) & (~df['signal_volume_usd'].isna()), 'trading_type'] = 3  # –¢–æ–ª—å–∫–æ —Ñ—å—é—á–µ—Ä—Å—ã

        # 4. –ö–∞—Ç–µ–≥–æ—Ä–∏—è —Ç–æ–∫–µ–Ω–∞ –ø–æ –æ–±—ä–µ–º—É BTC
        df['btc_volume_category'] = 0  # –ù–µ—Ç BTC –ø–∞—Ä—ã

        # –î–ª—è —Ç–æ–∫–µ–Ω–æ–≤ —Å BTC –ø–∞—Ä–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∑–∏—Ä—É–µ–º –ø–æ –æ–±—ä–µ–º—É
        btc_mask = df['has_btc_pair'] == 1
        if btc_mask.any():
            btc_volumes = df.loc[btc_mask, 'spot_volume_btc_current']
            # –ö–≤–∞–Ω—Ç–∏–ª–∏ –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∑–∞—Ü–∏–∏
            q25 = btc_volumes.quantile(0.25)
            q50 = btc_volumes.quantile(0.50)
            q75 = btc_volumes.quantile(0.75)

            df.loc[btc_mask & (df['spot_volume_btc_current'] <= q25), 'btc_volume_category'] = 1  # –ù–∏–∑–∫–∏–π
            df.loc[btc_mask & (df['spot_volume_btc_current'] > q25) & (
                    df['spot_volume_btc_current'] <= q50), 'btc_volume_category'] = 2  # –°—Ä–µ–¥–Ω–∏–π
            df.loc[btc_mask & (df['spot_volume_btc_current'] > q50) & (
                    df['spot_volume_btc_current'] <= q75), 'btc_volume_category'] = 3  # –í—ã—Å–æ–∫–∏–π
            df.loc[btc_mask & (df['spot_volume_btc_current'] > q75), 'btc_volume_category'] = 4  # –û—á–µ–Ω—å –≤—ã—Å–æ–∫–∏–π

        # 5. –ü–æ–ª–Ω–æ—Ç–∞ –¥–∞–Ω–Ω—ã—Ö
        spot_cols = ['spot_volume_usdt_current', 'spot_price_usdt_current',
                     'spot_price_usdt_change_1h', 'spot_price_usdt_change_24h']
        df['spot_data_completeness'] = df[spot_cols].notna().sum(axis=1) / len(spot_cols)

        # 6. –ò—Å—Ç–æ—á–Ω–∏–∫ –¥–∞–Ω–Ω—ã—Ö –∞–≥—Ä–µ–≥–∏—Ä–æ–≤–∞–Ω–Ω—ã–π
        df['data_source_diversity'] = 0
        source_cols = ['oi_source_usdt', 'spot_volume_source_usdt',
                       'spot_volume_source_btc', 'spot_price_source_usdt']

        for col in source_cols:
            if col in df.columns:
                df['data_source_diversity'] += df[col].notna().astype(int)

        print(f"‚úÖ –°–æ–∑–¥–∞–Ω–æ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–Ω—ã—Ö –ø—Ä–∏–∑–Ω–∞–∫–æ–≤: 6")
        print(f"   - –¢–æ–∫–µ–Ω–æ–≤ —Å BTC –ø–∞—Ä–æ–π: {df['has_btc_pair'].sum()} ({df['has_btc_pair'].mean() * 100:.1f}%)")
        print(
            f"   - –¢–æ–∫–µ–Ω–æ–≤ —Å–æ —Å–ø–æ—Ç–æ–≤–æ–π —Ç–æ—Ä–≥–æ–≤–ª–µ–π: {df['has_spot_trading'].sum()} ({df['has_spot_trading'].mean() * 100:.1f}%)")

        return df

    def smart_fill_nulls(self, df: pd.DataFrame) -> pd.DataFrame:
        """
        –ò–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω–æ–µ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ NULL –∑–Ω–∞—á–µ–Ω–∏–π —Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º –∏—Ö –∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–≤–Ω–æ—Å—Ç–∏
        """
        print("\nüß† –ò–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω–æ–µ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ NULL –∑–Ω–∞—á–µ–Ω–∏–π...")

        # –î–ª—è BTC volume features - –∑–∞–ø–æ–ª–Ω—è–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–º –∑–Ω–∞—á–µ–Ω–∏–µ–º, –µ—Å–ª–∏ –Ω–µ—Ç BTC –ø–∞—Ä—ã
        for col in self.btc_volume_features:
            if col in df.columns:
                # –ì–¥–µ –µ—Å—Ç—å BTC –ø–∞—Ä–∞ - –∑–∞–ø–æ–ª–Ω—è–µ–º –º–µ–¥–∏–∞–Ω–æ–π
                btc_median = df.loc[df['has_btc_pair'] == 1, col].median()
                df.loc[(df['has_btc_pair'] == 1) & df[col].isna(), col] = btc_median

                # –ì–¥–µ –Ω–µ—Ç BTC –ø–∞—Ä—ã - –∑–∞–ø–æ–ª–Ω—è–µ–º -1 (—Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ)
                df.loc[df['has_btc_pair'] == 0, col] = -1

        # –î–ª—è —Å–ø–æ—Ç–æ–≤—ã—Ö features
        for col in self.spot_features:
            if col in df.columns:
                # –ì–¥–µ –µ—Å—Ç—å —Å–ø–æ—Ç - –∑–∞–ø–æ–ª–Ω—è–µ–º –º–µ–¥–∏–∞–Ω–æ–π
                spot_median = df.loc[df['has_spot_trading'] == 1, col].median()
                df.loc[(df['has_spot_trading'] == 1) & df[col].isna(), col] = spot_median

                # –ì–¥–µ –Ω–µ—Ç —Å–ø–æ—Ç–∞ - –∑–∞–ø–æ–ª–Ω—è–µ–º -999 (—Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ)
                df.loc[df['has_spot_trading'] == 0, col] = -999

        # –î–ª—è –ø—Ä–æ—Ü–µ–Ω—Ç–Ω—ã—Ö –∏–∑–º–µ–Ω–µ–Ω–∏–π –≥–¥–µ –Ω–µ—Ç —Å–ø–æ—Ç–∞ - –ª–æ–≥–∏—á–Ω–æ –ø–æ—Å—Ç–∞–≤–∏—Ç—å 0
        change_cols = [col for col in df.columns if 'change' in col and col in self.spot_features]
        for col in change_cols:
            df.loc[df['has_spot_trading'] == 0, col] = 0

        return df

    def create_interaction_features(self, df: pd.DataFrame) -> pd.DataFrame:
        """
        –°–æ–∑–¥–∞–µ—Ç –ø—Ä–∏–∑–Ω–∞–∫–∏ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ç–∏–ø–∞ —Ç–æ—Ä–≥–æ–≤–ª–∏
        """
        print("\nüîÑ –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–∏–∑–Ω–∞–∫–æ–≤ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è...")

        # 1. –°–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ —Ñ—å—é—á–µ—Ä—Å–Ω–æ–≥–æ –æ–±—ä–µ–º–∞ –∫ —Å–ø–æ—Ç–æ–≤–æ–º—É (–µ—Å–ª–∏ –µ—Å—Ç—å —Å–ø–æ—Ç)
        df['futures_to_spot_volume_ratio'] = np.where(
            (df['has_spot_trading'] == 1) & (df['spot_volume_usdt_current'] > 0),
            df['signal_volume_usd'] / df['spot_volume_usdt_current'],
            -1  # –°–ø–µ—Ü–∏–∞–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–µ–≥–æ —Å–ø–æ—Ç–∞
        )

        # 2. –ü—Ä–µ–º–∏—è —Ñ—å—é—á–µ—Ä—Å–æ–≤ –∫ —Å–ø–æ—Ç—É
        df['futures_spot_premium'] = np.where(
            (df['has_spot_trading'] == 1) & (df['spot_price_usdt_current'] > 0),
            (df['signal_price'] - df['spot_price_usdt_current']) / df['spot_price_usdt_current'] * 100,
            0
        )

        # 3. –û—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–∞—è —Å–∏–ª–∞ –¥–≤–∏–∂–µ–Ω–∏—è –¥–ª—è —Ç–æ–∫–µ–Ω–æ–≤ —Å BTC –ø–∞—Ä–æ–π
        df['btc_relative_strength'] = np.where(
            df['has_btc_pair'] == 1,
            df['spot_volume_btc_change_current_to_average'] - df['spot_volume_usdt_change_current_to_average'],
            0
        )

        # 4. –õ–∏–∫–≤–∏–¥–Ω–æ—Å—Ç—å —Ç–æ–∫–µ–Ω–∞ (–∫–æ–º–±–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –º–µ—Ç—Ä–∏–∫–∞)
        df['liquidity_score'] = (
                df['has_spot_trading'] * 0.5 +
                df['has_btc_pair'] * 0.3 +
                (df['data_source_diversity'] / 4) * 0.2
        )

        # 5. –†–∏—Å–∫ —Ç–æ–∫–µ–Ω–∞ (–æ–±—Ä–∞—Ç–Ω–∞—è –ª–∏–∫–≤–∏–¥–Ω–æ—Å—Ç–∏)
        df['token_risk_score'] = 1 - df['liquidity_score']

        return df

    def analyze_null_patterns(self, df: pd.DataFrame) -> Dict:
        """
        –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –ø–∞—Ç—Ç–µ—Ä–Ω—ã NULL –∑–Ω–∞—á–µ–Ω–∏–π –∏ –∏—Ö —Å–≤—è–∑—å —Å —É—Å–ø–µ—à–Ω–æ—Å—Ç—å—é
        """
        print("\nüìä –ê–Ω–∞–ª–∏–∑ –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤ NULL –∑–Ω–∞—á–µ–Ω–∏–π...")

        analysis = {}

        if 'is_successful_main' in df.columns:
            # –£—Å–ø–µ—à–Ω–æ—Å—Ç—å –ø–æ —Ç–∏–ø–∞–º —Ç–æ—Ä–≥–æ–≤–ª–∏
            trading_type_success = df.groupby('trading_type')['is_successful_main'].agg(['mean', 'count'])
            trading_type_names = {
                0: '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ',
                1: '–¢–æ–ª—å–∫–æ —Å–ø–æ—Ç',
                2: '–°–ø–æ—Ç + –§—å—é—á–µ—Ä—Å—ã',
                3: '–¢–æ–ª—å–∫–æ —Ñ—å—é—á–µ—Ä—Å—ã'
            }

            analysis['trading_type_success'] = {}
            for idx, row in trading_type_success.iterrows():
                type_name = trading_type_names.get(idx, f'–¢–∏–ø {idx}')
                analysis['trading_type_success'][type_name] = {
                    'success_rate': row['mean'] * 100,
                    'count': row['count']
                }

            # –£—Å–ø–µ—à–Ω–æ—Å—Ç—å –¥–ª—è —Ç–æ–∫–µ–Ω–æ–≤ —Å/–±–µ–∑ BTC –ø–∞—Ä—ã
            analysis['btc_pair_impact'] = {
                'with_btc_pair': df[df['has_btc_pair'] == 1]['is_successful_main'].mean() * 100,
                'without_btc_pair': df[df['has_btc_pair'] == 0]['is_successful_main'].mean() * 100,
                'count_with_btc': (df['has_btc_pair'] == 1).sum(),
                'count_without_btc': (df['has_btc_pair'] == 0).sum()
            }

            # –£—Å–ø–µ—à–Ω–æ—Å—Ç—å –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º –æ–±—ä–µ–º–∞ BTC
            btc_volume_success = df.groupby('btc_volume_category')['is_successful_main'].agg(['mean', 'count'])
            volume_category_names = {
                0: '–ù–µ—Ç BTC –ø–∞—Ä—ã',
                1: '–ù–∏–∑–∫–∏–π –æ–±—ä–µ–º BTC',
                2: '–°—Ä–µ–¥–Ω–∏–π –æ–±—ä–µ–º BTC',
                3: '–í—ã—Å–æ–∫–∏–π –æ–±—ä–µ–º BTC',
                4: '–û—á–µ–Ω—å –≤—ã—Å–æ–∫–∏–π –æ–±—ä–µ–º BTC'
            }

            analysis['btc_volume_category_success'] = {}
            for idx, row in btc_volume_success.iterrows():
                cat_name = volume_category_names.get(idx, f'–ö–∞—Ç–µ–≥–æ—Ä–∏—è {idx}')
                analysis['btc_volume_category_success'][cat_name] = {
                    'success_rate': row['mean'] * 100,
                    'count': row['count']
                }

        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ NULL –∑–Ω–∞—á–µ–Ω–∏—è–º
        null_stats = {}
        for col in self.btc_volume_features + self.spot_features:
            if col in df.columns:
                null_stats[col] = {
                    'null_count': df[col].isna().sum(),
                    'null_percentage': df[col].isna().mean() * 100
                }

        analysis['null_statistics'] = null_stats

        return analysis


def enhance_processor_with_null_awareness(processor_class):
    """
    –î–µ–∫–æ—Ä–∞—Ç–æ—Ä –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è null-aware —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏ –∫ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–º—É –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä—É
    """

    class NullAwareProcessor(processor_class):
        def __init__(self):
            super().__init__()
            self.null_handler = NullAwareFeatureEngineering()

            # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–µ –ø—Ä–∏–∑–Ω–∞–∫–∏ –∫ —Å–ø–∏—Å–∫—É
            self.null_indicator_features = [
                'has_btc_pair', 'has_spot_trading', 'trading_type',
                'btc_volume_category', 'spot_data_completeness',
                'data_source_diversity', 'futures_to_spot_volume_ratio',
                'futures_spot_premium', 'btc_relative_strength',
                'liquidity_score', 'token_risk_score'
            ]

        def _add_enhanced_technical_features(self, df: pd.DataFrame) -> pd.DataFrame:
            """–ü–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª—è–µ–º –º–µ—Ç–æ–¥ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è null-aware –ø—Ä–∏–∑–Ω–∞–∫–æ–≤"""
            # –°–Ω–∞—á–∞–ª–∞ –≤—ã–∑—ã–≤–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π –º–µ—Ç–æ–¥
            df = super()._add_enhanced_technical_features(df)

            # –î–æ–±–∞–≤–ª—è–µ–º null-aware –ø—Ä–∏–∑–Ω–∞–∫–∏
            df = self.null_handler.create_null_indicator_features(df)
            df = self.null_handler.smart_fill_nulls(df)
            df = self.null_handler.create_interaction_features(df)

            return df

        def prepare_full_feature_set(self, df: pd.DataFrame,
                                     target_column: str = 'is_successful_main') -> Tuple[
            pd.DataFrame, pd.Series, List[str]]:
            """–û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –ø—Ä–∏–∑–Ω–∞–∫–æ–≤"""
            # –í—ã–∑—ã–≤–∞–µ–º —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–∏–π –º–µ—Ç–æ–¥
            X, y, features = super().prepare_full_feature_set(df, target_column)

            # –î–æ–±–∞–≤–ª—è–µ–º null-indicator –ø—Ä–∏–∑–Ω–∞–∫–∏
            null_features = [f for f in self.null_indicator_features if f in df.columns]

            # –û–±–Ω–æ–≤–ª—è–µ–º X —Å –Ω–æ–≤—ã–º–∏ –ø—Ä–∏–∑–Ω–∞–∫–∞–º–∏
            if null_features:
                X_enhanced = df.loc[X.index, features + null_features]

                print(f"\n‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ NULL-aware –ø—Ä–∏–∑–Ω–∞–∫–æ–≤: {len(null_features)}")
                print(f"   –ò—Ç–æ–≥–æ –ø—Ä–∏–∑–Ω–∞–∫–æ–≤: {len(features + null_features)}")

                return X_enhanced, y, features + null_features

            return X, y, features

        def generate_comprehensive_report(self, df: pd.DataFrame, results: Dict,
                                          group_importance: pd.DataFrame) -> str:
            """–î–æ–ø–æ–ª–Ω—è–µ–º –æ—Ç—á–µ—Ç –∞–Ω–∞–ª–∏–∑–æ–º NULL –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤"""
            # –°–Ω–∞—á–∞–ª–∞ –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º –±–∞–∑–æ–≤—ã–π –æ—Ç—á–µ—Ç
            report_path = super().generate_comprehensive_report(df, results, group_importance)

            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º NULL –ø–∞—Ç—Ç–µ—Ä–Ω—ã
            null_analysis = self.null_handler.analyze_null_patterns(df)

            # –î–æ–ø–æ–ª–Ω—è–µ–º –æ—Ç—á–µ—Ç
            with open(report_path, 'a', encoding='utf-8') as f:
                f.write("\n\n" + "=" * 100 + "\n")
                f.write("–ê–ù–ê–õ–ò–ó –ü–ê–¢–¢–ï–†–ù–û–í NULL –ó–ù–ê–ß–ï–ù–ò–ô:\n")
                f.write("=" * 100 + "\n")

                if 'trading_type_success' in null_analysis:
                    f.write("\n–£–°–ü–ï–®–ù–û–°–¢–¨ –ü–û –¢–ò–ü–ê–ú –¢–û–†–ì–û–í–õ–ò:\n")
                    for trading_type, stats in null_analysis['trading_type_success'].items():
                        f.write(f"- {trading_type}: {stats['success_rate']:.1f}% —É—Å–ø–µ—Ö–∞ ({stats['count']} —Å–∏–≥–Ω–∞–ª–æ–≤)\n")

                if 'btc_pair_impact' in null_analysis:
                    f.write("\n–í–õ–ò–Ø–ù–ò–ï –ù–ê–õ–ò–ß–ò–Ø BTC –ü–ê–†–´:\n")
                    btc_impact = null_analysis['btc_pair_impact']
                    f.write(
                        f"- –° BTC –ø–∞—Ä–æ–π: {btc_impact['with_btc_pair']:.1f}% —É—Å–ø–µ—Ö–∞ ({btc_impact['count_with_btc']} —Å–∏–≥–Ω–∞–ª–æ–≤)\n")
                    f.write(
                        f"- –ë–µ–∑ BTC –ø–∞—Ä—ã: {btc_impact['without_btc_pair']:.1f}% —É—Å–ø–µ—Ö–∞ ({btc_impact['count_without_btc']} —Å–∏–≥–Ω–∞–ª–æ–≤)\n")

                if 'btc_volume_category_success' in null_analysis:
                    f.write("\n–£–°–ü–ï–®–ù–û–°–¢–¨ –ü–û –ö–ê–¢–ï–ì–û–†–ò–Ø–ú –û–ë–™–ï–ú–ê BTC:\n")
                    for category, stats in null_analysis['btc_volume_category_success'].items():
                        f.write(f"- {category}: {stats['success_rate']:.1f}% —É—Å–ø–µ—Ö–∞ ({stats['count']} —Å–∏–≥–Ω–∞–ª–æ–≤)\n")

                # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∞–Ω–∞–ª–∏–∑–∞
                f.write("\n–†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò –ù–ê –û–°–ù–û–í–ï NULL –ê–ù–ê–õ–ò–ó–ê:\n")

                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∫–æ–π —Ç–∏–ø —Ç–æ—Ä–≥–æ–≤–ª–∏ –Ω–∞–∏–±–æ–ª–µ–µ —É—Å–ø–µ—à–µ–Ω
                if 'trading_type_success' in null_analysis:
                    best_type = max(null_analysis['trading_type_success'].items(),
                                    key=lambda x: x[1]['success_rate'])
                    f.write(
                        f"‚úÖ –ù–∞–∏–±–æ–ª–µ–µ —É—Å–ø–µ—à–Ω—ã–π —Ç–∏–ø —Ç–æ—Ä–≥–æ–≤–ª–∏: {best_type[0]} ({best_type[1]['success_rate']:.1f}% —É—Å–ø–µ—Ö–∞)\n")

                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–ª–∏—è–Ω–∏–µ BTC –ø–∞—Ä—ã
                if 'btc_pair_impact' in null_analysis:
                    btc_impact = null_analysis['btc_pair_impact']
                    if btc_impact['with_btc_pair'] > btc_impact['without_btc_pair']:
                        f.write("‚úÖ –¢–æ–∫–µ–Ω—ã —Å BTC –ø–∞—Ä–æ–π –ø–æ–∫–∞–∑—ã–≤–∞—é—Ç –ª—É—á—à—É—é –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å\n")
                    else:
                        f.write("‚ö†Ô∏è  –ù–∞–ª–∏—á–∏–µ BTC –ø–∞—Ä—ã –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –æ–ø—Ä–µ–¥–µ–ª—è—é—â–∏–º —Ñ–∞–∫—Ç–æ—Ä–æ–º —É—Å–ø–µ—Ö–∞\n")

            return report_path

    return NullAwareProcessor


# –ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —Å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–æ–º
if __name__ == "__main__":
    # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –±–∞–∑–æ–≤—ã–π –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä
    from enhanced_full_processor import EnhancedFullSignalsProcessor

    # –°–æ–∑–¥–∞–µ–º null-aware –≤–µ—Ä—Å–∏—é
    NullAwareFullProcessor = enhance_processor_with_null_awareness(EnhancedFullSignalsProcessor)

    # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫–∞–∫ –æ–±—ã—á–Ω–æ
    processor = NullAwareFullProcessor()

    # –î–∞–ª—å—à–µ —Ä–∞–±–æ—Ç–∞–µ–º –∫–∞–∫ —Å –æ–±—ã—á–Ω—ã–º –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–æ–º
    # processor.get_all_signals_complete()
    # –∏ —Ç.–¥.