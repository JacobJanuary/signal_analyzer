#!/usr/bin/env python3
"""Test token_id functionality."""
from database.connection import get_db_cursor
from api_clients.coinmarketcap_client import CoinMarketCapClient
from modules.spot_usdt_processor import SpotUSDTProcessor


def check_tokens_table():
    """Check tokens table content."""
    print("üìã –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–∞–±–ª–∏—Ü—ã tokens")
    print("=" * 60)

    with get_db_cursor() as cursor:
        # –ü–æ–ª—É—á–∞–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ –∑–∞–ø–∏—Å–µ–π –¥–ª—è –ø—Ä–∏–º–µ—Ä–∞
        cursor.execute("""
                       SELECT id, symbol, token_id
                       FROM tokens
                       WHERE token_id IS NOT NULL LIMIT 10
                       """)

        tokens = cursor.fetchall()

        print(f"–ù–∞–π–¥–µ–Ω–æ —Ç–æ–∫–µ–Ω–æ–≤ —Å token_id: {len(tokens)}\n")

        for token in tokens:
            print(f"ID: {token['id']:<5} Symbol: {token['symbol']:<10} Token_ID: {token['token_id']}")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ —Ç–æ–∫–µ–Ω—ã
        print("\nüîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã—Ö —Ç–æ–∫–µ–Ω–æ–≤:")

        test_symbols = ['KOMA', 'SKYAI', 'BTC', 'MUBARAK']

        for symbol in test_symbols:
            cursor.execute("""
                           SELECT symbol, token_id
                           FROM tokens
                           WHERE symbol = %s
                           """, (symbol,))

            result = cursor.fetchone()
            if result:
                print(f"‚úÖ {symbol:<10} - token_id: {result['token_id']}")
            else:
                print(f"‚ùå {symbol:<10} - –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Ç–∞–±–ª–∏—Ü–µ tokens")


def test_cmc_with_token_id():
    """Test CoinMarketCap API with token_id."""
    print("\n\nüîç –¢–µ—Å—Ç CoinMarketCap —Å token_id")
    print("=" * 60)

    cmc = CoinMarketCapClient()

    if not cmc.is_configured():
        print("‚ùå API –∫–ª—é—á –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω")
        return

    # –¢–µ—Å—Ç–∏—Ä—É–µ–º KOMA
    symbol = 'KOMA'

    # 1. –ü–æ–ª—É—á–∞–µ–º token_id –∏–∑ –ë–î
    token_id = cmc.get_token_id_from_db(symbol)

    if token_id:
        print(f"‚úÖ –ù–∞–π–¥–µ–Ω token_id –¥–ª—è {symbol}: {token_id}")

        # 2. –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω—é—é –∫–æ—Ç–∏—Ä–æ–≤–∫—É
        latest = cmc.get_latest_quote(symbol)
        if latest and 'quote' in latest and 'USD' in latest['quote']:
            usd = latest['quote']['USD']
            print(f"\nüìä –ü–æ—Å–ª–µ–¥–Ω—è—è –∫–æ—Ç–∏—Ä–æ–≤–∫–∞:")
            print(f"   –¶–µ–Ω–∞: ${usd.get('price', 0):.8f}")
            print(f"   –û–±—ä–µ–º 24h: ${usd.get('volume_24h', 0):,.2f}")
            print(f"   –ò–∑–º–µ–Ω–µ–Ω–∏–µ 24h: {usd.get('percent_change_24h', 0):.2f}%")

        # 3. –ü–æ–ª—É—á–∞–µ–º –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ
        market_data = cmc.get_market_data_for_symbol(symbol)
        if market_data:
            print(f"\nüìà –†—ã–Ω–æ—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ (30 –¥–Ω–µ–π):")
            print(f"   –°—Ä–µ–¥–Ω–∏–π –æ–±—ä–µ–º: ${market_data['avg_volume_usdt']:,.2f}")
            print(f"   –¢–µ–∫—É—â–∏–π –æ–±—ä–µ–º: ${market_data['current_volume_usdt']:,.2f}")
            print(f"   –í—á–µ—Ä–∞—à–Ω–∏–π –æ–±—ä–µ–º: ${market_data['yesterday_volume_usdt']:,.2f}")
            print(f"   –¢–æ—á–µ–∫ –¥–∞–Ω–Ω—ã—Ö: {market_data['data_points']}")
    else:
        print(f"‚ùå token_id –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è {symbol}")


def test_full_processing():
    """Test full processing with token_id support."""
    print("\n\nüîÑ –ü–æ–ª–Ω—ã–π —Ç–µ—Å—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π token_id")
    print("=" * 60)

    processor = SpotUSDTProcessor()

    test_symbols = ['KOMA', 'SKYAI']

    for symbol in test_symbols:
        print(f"\nüìä –û–±—Ä–∞–±–æ—Ç–∫–∞ {symbol}:")
        print("-" * 40)

        result = processor.process_symbol(symbol)

        if result.error:
            print(f"‚ùå –û—à–∏–±–∫–∞: {result.error}")
        else:
            print(f"‚úÖ –ò—Å—Ç–æ—á–Ω–∏–∫: {result.source_exchange.value}")
            print(
                f"   –°—Ä–µ–¥–Ω–∏–π –æ–±—ä–µ–º: ${result.avg_volume_usdt:,.2f}" if result.avg_volume_usdt else "   –°—Ä–µ–¥–Ω–∏–π –æ–±—ä–µ–º: N/A")
            print(
                f"   –¢–µ–∫—É—â–∏–π –æ–±—ä–µ–º: ${result.current_volume_usdt:,.2f}" if result.current_volume_usdt else "   –¢–µ–∫—É—â–∏–π –æ–±—ä–µ–º: N/A")
            print(
                f"   –¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞: ${result.current_price_usdt:.8f}" if result.current_price_usdt else "   –¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞: N/A")


def update_missing_token_ids():
    """Check if we need to update token_ids in the database."""
    print("\n\nüîß –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏—Ö token_id")
    print("=" * 60)

    with get_db_cursor() as cursor:
        # –ù–∞—Ö–æ–¥–∏–º —Ç–æ–∫–µ–Ω—ã –±–µ–∑ token_id
        cursor.execute("""
                       SELECT id, symbol
                       FROM tokens
                       WHERE token_id IS NULL LIMIT 10
                       """)

        missing = cursor.fetchall()

        if missing:
            print(f"–ù–∞–π–¥–µ–Ω–æ —Ç–æ–∫–µ–Ω–æ–≤ –±–µ–∑ token_id: {len(missing)}")

            cmc = CoinMarketCapClient()
            if cmc.is_configured():
                print("\n–ü–æ–ø—ã—Ç–∫–∞ –ø–æ–ª—É—á–∏—Ç—å token_id –∏–∑ CoinMarketCap:")

                for token in missing[:3]:  # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–≤—ã–µ 3
                    symbol_info = cmc.get_symbol_map(token['symbol'])
                    if symbol_info and 'id' in symbol_info:
                        print(
                            f"‚úÖ {token['symbol']:<10} - CMC ID: {symbol_info['id']} ({symbol_info.get('name', 'N/A')})")

                        # –ú–æ–∂–Ω–æ –æ–±–Ω–æ–≤–∏—Ç—å –≤ –ë–î
                        # cursor.execute("""
                        #     UPDATE tokens
                        #     SET token_id = %s
                        #     WHERE id = %s
                        # """, (symbol_info['id'], token['id']))
                    else:
                        print(f"‚ùå {token['symbol']:<10} - –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ CoinMarketCap")
        else:
            print("‚úÖ –í—Å–µ —Ç–æ–∫–µ–Ω—ã –∏–º–µ—é—Ç token_id")


if __name__ == "__main__":
    # 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∞–±–ª–∏—Ü—É tokens
    check_tokens_table()

    # 2. –¢–µ—Å—Ç–∏—Ä—É–µ–º CoinMarketCap —Å token_id
    test_cmc_with_token_id()

    # 3. –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–ª–Ω—É—é –æ–±—Ä–∞–±–æ—Ç–∫—É
    test_full_processing()

    # 4. –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏–µ token_id
    update_missing_token_ids()