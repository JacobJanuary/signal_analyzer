#!/usr/bin/env python3
"""Detailed debug of CoinMarketCap API issues."""
from api_clients.coinmarketcap_client import CoinMarketCapClient
from datetime import datetime, timedelta, timezone
import json


def debug_cmc_api():
    """Debug CoinMarketCap API calls."""
    print("üîç –î–µ—Ç–∞–ª—å–Ω–∞—è –æ—Ç–ª–∞–¥–∫–∞ CoinMarketCap API")
    print("=" * 60)

    cmc = CoinMarketCapClient()

    if not cmc.is_configured():
        print("‚ùå API –∫–ª—é—á –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω")
        return

    # –¢–µ—Å—Ç–∏—Ä—É–µ–º KOMA
    symbol = 'KOMA'
    print(f"\nüìä –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ {symbol}:")

    # 1. –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–∏–º–≤–æ–ª–µ
    print("\n1Ô∏è‚É£ –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å–∏–º–≤–æ–ª–µ:")
    symbol_info = cmc.get_symbol_map(symbol)
    if symbol_info:
        print(f"‚úÖ –ù–∞–π–¥–µ–Ω: {symbol_info['name']} (ID: {symbol_info['id']})")
        print(f"   Slug: {symbol_info.get('slug', 'N/A')}")
        print(f"   Rank: {symbol_info.get('rank', 'N/A')}")
        print(f"   Is Active: {symbol_info.get('is_active', 'N/A')}")

        # 2. –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω—é—é –∫–æ—Ç–∏—Ä–æ–≤–∫—É
        print("\n2Ô∏è‚É£ –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ—Å–ª–µ–¥–Ω–µ–π –∫–æ—Ç–∏—Ä–æ–≤–∫–∏:")
        latest_quote = cmc.get_latest_quote(symbol)
        if latest_quote:
            print("‚úÖ –ö–æ—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ–ª—É—á–µ–Ω–∞:")
            if 'quote' in latest_quote and 'USD' in latest_quote['quote']:
                usd_data = latest_quote['quote']['USD']
                print(f"   –¶–µ–Ω–∞: ${usd_data.get('price', 0):.8f}")
                print(f"   –û–±—ä–µ–º 24h: ${usd_data.get('volume_24h', 0):,.2f}")
                print(f"   Market Cap: ${usd_data.get('market_cap', 0):,.2f}")
                print(f"   –ò–∑–º–µ–Ω–µ–Ω–∏–µ 24h: {usd_data.get('percent_change_24h', 0):.2f}%")
            else:
                print("‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö USD –≤ –∫–æ—Ç–∏—Ä–æ–≤–∫–µ")
                print(f"   –î–∞–Ω–Ω—ã–µ: {json.dumps(latest_quote, indent=2)}")
        else:
            print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∫–æ—Ç–∏—Ä–æ–≤–∫—É")

        # 3. –ü–æ–ª—É—á–∞–µ–º –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ
        print("\n3Ô∏è‚É£ –ü–æ–ª—É—á–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö:")
        end_time = datetime.now(timezone.utc)
        start_time = end_time - timedelta(days=30)

        historical_quotes = cmc.get_historical_quotes(
            symbol, start_time, end_time, interval='24h', count=30
        )

        if historical_quotes:
            print(f"‚úÖ –ü–æ–ª—É—á–µ–Ω–æ –∑–∞–ø–∏—Å–µ–π: {len(historical_quotes)}")
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 3 –∑–∞–ø–∏—Å–∏
            for i, quote in enumerate(historical_quotes[-3:]):
                timestamp = quote.get('timestamp', 'N/A')
                if 'quote' in quote and 'USD' in quote['quote']:
                    usd = quote['quote']['USD']
                    print(
                        f"   [{i + 1}] {timestamp}: ${usd.get('price', 0):.8f}, Vol: ${usd.get('volume_24h', 0):,.2f}")
        else:
            print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ")

        # 4. –¢–µ—Å—Ç–∏—Ä—É–µ–º –º–µ—Ç–æ–¥ get_market_data_for_symbol
        print("\n4Ô∏è‚É£ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ get_market_data_for_symbol:")
        market_data = cmc.get_market_data_for_symbol(symbol)
        if market_data:
            print("‚úÖ –†—ã–Ω–æ—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—É—á–µ–Ω—ã:")
            for key, value in market_data.items():
                if isinstance(value, float):
                    print(f"   {key}: ${value:,.2f}")
                else:
                    print(f"   {key}: {value}")
        else:
            print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ä—ã–Ω–æ—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ")
    else:
        print(f"‚ùå –°–∏–º–≤–æ–ª {symbol} –Ω–µ –Ω–∞–π–¥–µ–Ω")


def test_direct_api_call():
    """Test direct API call to debug issues."""
    print("\n\nüîß –ü—Ä—è–º–æ–π –≤—ã–∑–æ–≤ API")
    print("=" * 60)

    cmc = CoinMarketCapClient()

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä—è–º–æ–π –≤—ã–∑–æ–≤ –¥–ª—è KOMA
    print("\n–ü—Ä—è–º–æ–π –∑–∞–ø—Ä–æ—Å –¥–ª—è KOMA (ID: 33405):")

    # –ò—Å–ø–æ–ª—å–∑—É–µ–º ID –Ω–∞–ø—Ä—è–º—É—é
    params = {
        'id': '33405',  # KOMA ID
        'convert': 'USD'
    }

    response = cmc._make_request('/v1/cryptocurrency/quotes/latest', params)
    if response:
        print("‚úÖ –û—Ç–≤–µ—Ç –ø–æ–ª—É—á–µ–Ω:")
        print(json.dumps(response, indent=2)[:500] + "...")  # –ü–µ—Ä–≤—ã–µ 500 —Å–∏–º–≤–æ–ª–æ–≤
    else:
        print("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä—è–º–æ–º –∑–∞–ø—Ä–æ—Å–µ")


def check_api_limits():
    """Check API rate limits and credits."""
    print("\n\nüìä –ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–∏–º–∏—Ç–æ–≤ API")
    print("=" * 60)

    cmc = CoinMarketCapClient()

    # –î–µ–ª–∞–µ–º –∑–∞–ø—Ä–æ—Å –∏ —Å–º–æ—Ç—Ä–∏–º –∑–∞–≥–æ–ª–æ–≤–∫–∏ –æ—Ç–≤–µ—Ç–∞
    print("–ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—Å—Ç–∞–≤—à–∏—Ö—Å—è –∫—Ä–µ–¥–∏—Ç–æ–≤...")

    # –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —á–µ—Ä–µ–∑ requests –º—ã –Ω–µ –º–æ–∂–µ–º –ø–æ–ª—É—á–∏—Ç—å –∑–∞–≥–æ–ª–æ–≤–∫–∏ –æ—Ç–≤–µ—Ç–∞
    # –∏–∑ –Ω–∞—à–µ–π —Ç–µ–∫—É—â–µ–π —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏. –ù–æ –º–æ–∂–Ω–æ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å, —Ä–∞–±–æ—Ç–∞–µ—Ç –ª–∏ API

    test_symbols = ['BTC', 'ETH', 'KOMA']
    for symbol in test_symbols:
        quote = cmc.get_latest_quote(symbol)
        if quote:
            print(f"‚úÖ {symbol} - OK")
        else:
            print(f"‚ùå {symbol} - Failed")


if __name__ == "__main__":
    debug_cmc_api()
    test_direct_api_call()
    check_api_limits()