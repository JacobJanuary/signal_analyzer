#!/usr/bin/env python3
"""Debug script to test OI processing."""
from modules.oi_processor import OIProcessor
import json


def test_oi_processing(symbol: str = "BTC"):
    """Test OI processing for a symbol."""
    print(f"\nüîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏ OI –¥–ª—è {symbol}")
    print("=" * 50)

    processor = OIProcessor()
    result = processor.process_symbol(symbol)

    print(f"\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã:")
    print(f"- –û—à–∏–±–∫–∞: {result.error}")
    print(f"- –ë–∏—Ä–∂–∞: {result.source_exchange.value if result.source_exchange else 'None'}")
    print(
        f"- –°—Ä–µ–¥–Ω–∏–π OI (30 –¥–Ω–µ–π): {result.average_oi_usdt:,.2f} USDT" if result.average_oi_usdt else "- –°—Ä–µ–¥–Ω–∏–π OI: None")
    print(f"- –¢–µ–∫—É—â–∏–π OI: {result.current_oi_usdt:,.2f} USDT" if result.current_oi_usdt else "- –¢–µ–∫—É—â–∏–π OI: None")
    print(
        f"- –ò–∑–º–µ–Ω–µ–Ω–∏–µ: {result.change_percentage:.2f}%" if result.change_percentage is not None else "- –ò–∑–º–µ–Ω–µ–Ω–∏–µ: None")

    # –î–µ—Ç–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞
    print(f"\nüîß –î–µ—Ç–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –æ–±—ä–µ–∫—Ç–∞:")
    print(f"result.current_oi_usdt = {result.current_oi_usdt}")
    print(f"type(result.current_oi_usdt) = {type(result.current_oi_usdt)}")

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—Å–µ—Ö –∞—Ç—Ä–∏–±—É—Ç–æ–≤
    print(f"\nüìã –í—Å–µ –∞—Ç—Ä–∏–±—É—Ç—ã OIResult:")
    for attr in ['average_oi_usdt', 'current_oi_usdt', 'change_percentage', 'source_exchange', 'error']:
        value = getattr(result, attr, 'ATTRIBUTE_NOT_FOUND')
        print(f"  - {attr}: {value}")

    return result


def test_database_save():
    """Test saving to database."""
    from database.models import EnrichedSignalData, signal_repository
    from datetime import datetime, timezone

    print("\nüîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ –ë–î")
    print("=" * 50)

    # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
    test_data = EnrichedSignalData(
        signal_id=999999,  # –¢–µ—Å—Ç–æ–≤—ã–π ID
        symbol="TEST",
        created_at=datetime.now(timezone.utc),
        oi_average_usdt=1000000.0,
        oi_now_usdt=1100000.0,
        oi_change_pct_usdt=10.0,
        oi_source_usdt="binance"
    )

    print("\nüìä –î–∞–Ω–Ω—ã–µ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è:")
    for field, value in test_data.__dict__.items():
        if value is not None:
            print(f"  - {field}: {value}")

    # –ü–æ–ø—ã—Ç–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
    try:
        # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä–∏–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Ç–∞–±–ª–∏—Ü—ã
        from database.connection import get_db_cursor
        with get_db_cursor() as cursor:
            cursor.execute("DESCRIBE signals_10min_enriched")
            columns = cursor.fetchall()
            print("\nüìã –°—Ç—Ä—É–∫—Ç—É—Ä–∞ —Ç–∞–±–ª–∏—Ü—ã signals_10min_enriched:")
            for col in columns:
                if 'oi' in col['Field']:
                    print(f"  - {col['Field']}: {col['Type']}")
    except Exception as e:
        print(f"\n‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã —Ç–∞–±–ª–∏—Ü—ã: {e}")


if __name__ == "__main__":
    # –¢–µ—Å—Ç 1: –û–±—Ä–∞–±–æ—Ç–∫–∞ OI
    symbol = input("–í–≤–µ–¥–∏—Ç–µ —Å–∏–º–≤–æ–ª –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é BTC): ").strip().upper() or "BTC"
    result = test_oi_processing(symbol)

    # –¢–µ—Å—Ç 2: –ü—Ä–æ–≤–µ—Ä–∫–∞ –ë–î
    if input("\n\n–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ –ë–î? (y/n): ").lower() == 'y':
        test_database_save()