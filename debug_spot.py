#!/usr/bin/env python3
"""Debug script to test spot market processing."""
from modules.spot_usdt_processor import SpotUSDTProcessor
from database.models import signal_repository
import json


def test_spot_processing(symbol: str = None):
    """Test spot processing for a symbol."""
    if symbol:
        print(f"\nüîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–ø–æ—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö –¥–ª—è {symbol}")
        print("=" * 50)

        processor = SpotUSDTProcessor()
        result = processor.process_symbol(symbol)

        print(f"\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã:")
        print(f"- –û—à–∏–±–∫–∞: {result.error}")
        print(f"- –ë–∏—Ä–∂–∞: {result.source_exchange.value if result.source_exchange else 'None'}")

        if not result.error:
            print(f"\nüìà –û–±—ä–µ–º—ã:")
            print(
                f"- –°—Ä–µ–¥–Ω–∏–π –æ–±—ä–µ–º (30 –¥–Ω–µ–π): ${result.avg_volume_usdt:,.2f}" if result.avg_volume_usdt else "- –°—Ä–µ–¥–Ω–∏–π –æ–±—ä–µ–º: None")
            print(
                f"- –¢–µ–∫—É—â–∏–π –æ–±—ä–µ–º: ${result.current_volume_usdt:,.2f}" if result.current_volume_usdt else "- –¢–µ–∫—É—â–∏–π –æ–±—ä–µ–º: None")
            print(
                f"- –ò–∑–º–µ–Ω–µ–Ω–∏–µ –æ–±—ä–µ–º–∞: {result.volume_change_percentage:.2f}%" if result.volume_change_percentage is not None else "- –ò–∑–º–µ–Ω–µ–Ω–∏–µ –æ–±—ä–µ–º–∞: None")

            print(f"\nüí∞ –¶–µ–Ω—ã:")
            print(
                f"- –°—Ä–µ–¥–Ω—è—è —Ü–µ–Ω–∞ (30 –¥–Ω–µ–π): ${result.avg_price_usdt:,.2f}" if result.avg_price_usdt else "- –°—Ä–µ–¥–Ω—è—è —Ü–µ–Ω–∞: None")
            print(
                f"- –¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞: ${result.current_price_usdt:,.2f}" if result.current_price_usdt else "- –¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞: None")
            print(
                f"- –ò–∑–º–µ–Ω–µ–Ω–∏–µ —Ü–µ–Ω—ã: {result.price_change_percentage:.2f}%" if result.price_change_percentage is not None else "- –ò–∑–º–µ–Ω–µ–Ω–∏–µ —Ü–µ–Ω—ã: None")
    else:
        # –ü–æ–ª—É—á–∞–µ–º —Å–∏–º–≤–æ–ª—ã –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        print("\nüìã –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–∏–º–≤–æ–ª–æ–≤ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...")
        try:
            signals = signal_repository.get_new_signals(last_processed_id=0)
            if signals:
                print(f"–ù–∞–π–¥–µ–Ω–æ {len(signals)} —Å–∏–≥–Ω–∞–ª–æ–≤")
                for signal in signals[:5]:  # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–≤—ã–µ 5
                    print(f"\n--- –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏–º–≤–æ–ª–∞: {signal.symbol} ---")
                    test_spot_processing(signal.symbol)
            else:
                print("–ù–µ—Ç –Ω–æ–≤—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö")
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –∏–∑ –ë–î: {e}")


def check_symbol_availability(symbol: str):
    """Check if symbol is available on spot markets."""
    print(f"\nüîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ {symbol} –Ω–∞ —Å–ø–æ—Ç–æ–≤—ã—Ö —Ä—ã–Ω–∫–∞—Ö")
    print("=" * 50)

    from api_clients.binance_client import BinanceClient
    from api_clients.bybit_client import BybitClient

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ Binance
    print("\nüìä Binance Spot:")
    binance = BinanceClient()
    trading_symbol = f"{symbol}USDT"

    # –ü—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å –æ–¥–Ω—É —Å–≤–µ—á—É
    klines = binance.get_spot_klines(trading_symbol, "1d", limit=1)
    if klines:
        print(f"‚úÖ {trading_symbol} –¥–æ—Å—Ç—É–ø–µ–Ω –Ω–∞ Binance Spot")
        print(f"   –ü–æ—Å–ª–µ–¥–Ω—è—è —Ü–µ–Ω–∞: ${float(klines[0][4]):,.2f}")
    else:
        print(f"‚ùå {trading_symbol} –ù–ï –¥–æ—Å—Ç—É–ø–µ–Ω –Ω–∞ Binance Spot")

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ Bybit
    print("\nüìä Bybit Spot:")
    bybit = BybitClient()

    klines = bybit.get_spot_klines(trading_symbol, "D",
                                   start_time=1704067200000,
                                   end_time=1704153600000,
                                   limit=1)
    if klines:
        print(f"‚úÖ {trading_symbol} –¥–æ—Å—Ç—É–ø–µ–Ω –Ω–∞ Bybit Spot")
        print(f"   –ü–æ—Å–ª–µ–¥–Ω—è—è —Ü–µ–Ω–∞: ${float(klines[0][4]):,.2f}")
    else:
        print(f"‚ùå {trading_symbol} –ù–ï –¥–æ—Å—Ç—É–ø–µ–Ω –Ω–∞ Bybit Spot")


def list_common_spot_symbols():
    """List common spot trading symbols."""
    print("\nüìã –ü—Ä–∏–º–µ—Ä—ã –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö —Å–ø–æ—Ç–æ–≤—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤:")
    print("=" * 50)
    common_symbols = [
        "BTC", "ETH", "BNB", "XRP", "ADA", "SOL", "DOT", "DOGE",
        "AVAX", "MATIC", "LINK", "UNI", "ATOM", "LTC", "ETC"
    ]

    print("–°–∏–º–≤–æ–ª—ã –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:")
    for symbol in common_symbols:
        print(f"  - {symbol}")

    return common_symbols


if __name__ == "__main__":
    print("üîß –û—Ç–ª–∞–¥–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–ø–æ—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö")
    print("=" * 50)

    choice = input(
        "\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:\n1. –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π —Å–∏–º–≤–æ–ª\n2. –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–∏–º–≤–æ–ª—ã –∏–∑ –ë–î\n3. –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å —Å–∏–º–≤–æ–ª–∞\n4. –ü–æ–∫–∞–∑–∞—Ç—å –ø–æ–ø—É–ª—è—Ä–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã\n\n–í–∞—à –≤—ã–±–æ—Ä (1-4): ")

    if choice == "1":
        symbol = input("–í–≤–µ–¥–∏—Ç–µ —Å–∏–º–≤–æ–ª (–Ω–∞–ø—Ä–∏–º–µ—Ä, BTC): ").strip().upper()
        if symbol:
            test_spot_processing(symbol)
    elif choice == "2":
        test_spot_processing()
    elif choice == "3":
        symbol = input("–í–≤–µ–¥–∏—Ç–µ —Å–∏–º–≤–æ–ª –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏: ").strip().upper()
        if symbol:
            check_symbol_availability(symbol)
    elif choice == "4":
        symbols = list_common_spot_symbols()
        if input("\n–ü—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å –æ–¥–∏–Ω –∏–∑ –Ω–∏—Ö? (y/n): ").lower() == 'y':
            symbol = input("–í–≤–µ–¥–∏—Ç–µ —Å–∏–º–≤–æ–ª: ").strip().upper()
            if symbol:
                test_spot_processing(symbol)