#!/usr/bin/env python3
"""Test CoinMarketCap data saving to database."""
from datetime import datetime, timezone
from modules.spot_usdt_processor import SpotUSDTProcessor
from database.models import EnrichedSignalData, signal_repository
from database.connection import get_db_cursor
from utils.logger import setup_logger

logger = setup_logger(__name__)


def create_test_signal_with_fk(symbol: str, token_id: int = 1) -> int:
    """Create a test signal in signals_10min table with proper FK."""
    with get_db_cursor() as cursor:
        # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä–∏–º, –∫–∞–∫–∏–µ –ø–æ–ª—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ
        cursor.execute("""
                       SELECT COLUMN_NAME, IS_NULLABLE, COLUMN_DEFAULT
                       FROM INFORMATION_SCHEMA.COLUMNS
                       WHERE TABLE_SCHEMA = DATABASE()
                         AND TABLE_NAME = 'signals_10min'
                         AND IS_NULLABLE = 'NO'
                         AND COLUMN_DEFAULT IS NULL
                         AND COLUMN_NAME != 'id'
                       """)
        required_fields = cursor.fetchall()

        # –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å —Å –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–º–∏ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–º–∏ –ø–æ–ª—è–º–∏
        cursor.execute("""
                       INSERT INTO signals_10min (symbol, token_id)
                       VALUES (%s, %s)
                       """, (symbol, token_id))

        return cursor.lastrowid


def test_coinmarketcap_processing_and_save():
    """Test processing symbol that only exists on CoinMarketCap and saving to DB."""
    print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö CoinMarketCap")
    print("=" * 60)

    # –°–∏–º–≤–æ–ª—ã, –∫–æ—Ç–æ—Ä—ã–µ —Ç–æ—á–Ω–æ –µ—Å—Ç—å –≤ CoinMarketCap
    test_symbols = ['KOMA', 'SKYAI', 'MUBARAK']

    processor = SpotUSDTProcessor()
    created_signal_ids = []

    try:
        for symbol in test_symbols:
            print(f"\nüìä –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ {symbol}:")
            print("-" * 40)

            # 1. –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å –≤ signals_10min –¥–ª—è FK
            signal_id = create_test_signal_with_fk(symbol)
            created_signal_ids.append(signal_id)
            print(f"‚úÖ –°–æ–∑–¥–∞–Ω —Å–∏–≥–Ω–∞–ª ID: {signal_id}")

            # 2. –û–±—Ä–∞–±–æ—Ç–∫–∞ —á–µ—Ä–µ–∑ –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä
            result = processor.process_symbol(symbol)

            if result.error:
                print(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏: {result.error}")
                continue

            print(f"‚úÖ –î–∞–Ω–Ω—ã–µ –ø–æ–ª—É—á–µ–Ω—ã –æ—Ç: {result.source_exchange.value}")
            print(
                f"   –°—Ä–µ–¥–Ω–∏–π –æ–±—ä–µ–º: ${result.avg_volume_usdt:,.2f}" if result.avg_volume_usdt else "   –°—Ä–µ–¥–Ω–∏–π –æ–±—ä–µ–º: None")
            print(
                f"   –¢–µ–∫—É—â–∏–π –æ–±—ä–µ–º: ${result.current_volume_usdt:,.2f}" if result.current_volume_usdt else "   –¢–µ–∫—É—â–∏–π –æ–±—ä–µ–º: None")
            print(
                f"   –í—á–µ—Ä–∞—à–Ω–∏–π –æ–±—ä–µ–º: ${result.yesterday_volume_usdt:,.2f}" if result.yesterday_volume_usdt else "   –í—á–µ—Ä–∞—à–Ω–∏–π –æ–±—ä–µ–º: None")
            print(
                f"   –°—Ä–µ–¥–Ω—è—è —Ü–µ–Ω–∞: ${result.avg_price_usdt:,.2f}" if result.avg_price_usdt else "   –°—Ä–µ–¥–Ω—è—è —Ü–µ–Ω–∞: None")
            print(
                f"   –¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞: ${result.current_price_usdt:,.2f}" if result.current_price_usdt else "   –¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞: None")

            # 3. –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–ø–∏—Å–∏ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
            enriched_data = EnrichedSignalData(
                signal_id=signal_id,  # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ä–µ–∞–ª—å–Ω—ã–π signal_id
                symbol=symbol,
                created_at=datetime.now(timezone.utc),
                # Volume data
                spot_volume_usdt_average=result.avg_volume_usdt,
                spot_volume_usdt_current=result.current_volume_usdt,
                spot_volume_usdt_yesterday=result.yesterday_volume_usdt,
                spot_volume_usdt_change_current_to_yesterday=result.volume_change_current_to_yesterday,
                spot_volume_usdt_change_current_to_average=result.volume_change_current_to_average,
                spot_volume_source_usdt=result.source_exchange.value if result.source_exchange else None,
                # Price data
                spot_price_usdt_average=result.avg_price_usdt,
                spot_price_usdt_current=result.current_price_usdt,
                spot_price_usdt_yesterday=result.yesterday_price_usdt,
                spot_price_usdt_change_1h=result.price_change_1h,
                spot_price_usdt_change_24h=result.price_change_24h,
                spot_price_usdt_change_7d=result.price_change_7d,
                spot_price_usdt_change_30d=result.price_change_30d,
                spot_price_source_usdt=result.source_exchange.value if result.source_exchange else None
            )

            # 4. –ü–æ–ø—ã—Ç–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
            print("\nüíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ –ë–î...")
            try:
                success = signal_repository.save_enriched_data(enriched_data)
                if success:
                    print("‚úÖ –î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ –ë–î")

                    # 5. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
                    with get_db_cursor() as cursor:
                        cursor.execute("""
                                       SELECT signal_id,
                                              symbol,
                                              spot_volume_source_usdt,
                                              spot_volume_usdt_average,
                                              spot_volume_usdt_current,
                                              spot_price_source_usdt,
                                              spot_price_usdt_current
                                       FROM signals_10min_enriched
                                       WHERE signal_id = %s
                                       """, (signal_id,))

                        saved_data = cursor.fetchone()
                        if saved_data:
                            print("\nüìã –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö:")
                            print(f"   signal_id: {saved_data['signal_id']}")
                            print(f"   symbol: {saved_data['symbol']}")
                            print(f"   source: {saved_data['spot_volume_source_usdt']}")
                            print(f"   avg_volume: ${float(saved_data['spot_volume_usdt_average']):,.2f}" if saved_data[
                                'spot_volume_usdt_average'] else "   avg_volume: None")
                            print(f"   current_volume: ${float(saved_data['spot_volume_usdt_current']):,.2f}" if
                                  saved_data['spot_volume_usdt_current'] else "   current_volume: None")
                            print(
                                f"   current_price: ${float(saved_data['spot_price_usdt_current']):,.2f}" if saved_data[
                                    'spot_price_usdt_current'] else "   current_price: None")
                        else:
                            print("‚ùå –î–∞–Ω–Ω—ã–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ –ë–î –ø–æ—Å–ª–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è")
                else:
                    print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –≤ –ë–î")
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏: {e}")
                import traceback
                traceback.print_exc()

    finally:
        # –û—á–∏—Å—Ç–∫–∞ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö
        cleanup_test_data(created_signal_ids)


def cleanup_test_data(signal_ids: list):
    """–û—á–∏—Å—Ç–∫–∞ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö."""
    if not signal_ids:
        return

    print("\n\nüßπ –û—á–∏—Å—Ç–∫–∞ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö...")
    try:
        with get_db_cursor() as cursor:
            # –£–¥–∞–ª—è–µ–º –∏–∑ enriched
            placeholders = ','.join(['%s'] * len(signal_ids))
            cursor.execute(f"""
                DELETE FROM signals_10min_enriched 
                WHERE signal_id IN ({placeholders})
            """, signal_ids)
            enriched_deleted = cursor.rowcount

            # –£–¥–∞–ª—è–µ–º –∏–∑ signals_10min
            cursor.execute(f"""
                DELETE FROM signals_10min 
                WHERE id IN ({placeholders})
            """, signal_ids)
            signals_deleted = cursor.rowcount

            print(f"‚úÖ –£–¥–∞–ª–µ–Ω–æ –∑–∞–ø–∏—Å–µ–π:")
            print(f"   signals_10min_enriched: {enriched_deleted}")
            print(f"   signals_10min: {signals_deleted}")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ: {e}")


def test_specific_symbol(symbol: str):
    """Test a specific symbol with detailed debugging."""
    print(f"\n\nüîç –î–µ—Ç–∞–ª—å–Ω—ã–π —Ç–µ—Å—Ç –¥–ª—è {symbol}")
    print("=" * 60)

    processor = SpotUSDTProcessor()

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—ã–π –∏—Å—Ç–æ—á–Ω–∏–∫ –æ—Ç–¥–µ–ª—å–Ω–æ
    print("\n1Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä–∫–∞ Binance:")
    binance_result = processor._process_binance_spot(f"{symbol}USDT")
    if binance_result.error:
        print(f"   ‚ùå {binance_result.error}")
    else:
        print(f"   ‚úÖ –î–∞–Ω–Ω—ã–µ –ø–æ–ª—É—á–µ–Ω—ã")

    print("\n2Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä–∫–∞ Bybit:")
    bybit_result = processor._process_bybit_spot(f"{symbol}USDT")
    if bybit_result.error:
        print(f"   ‚ùå {bybit_result.error}")
    else:
        print(f"   ‚úÖ –î–∞–Ω–Ω—ã–µ –ø–æ–ª—É—á–µ–Ω—ã")

    print("\n3Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä–∫–∞ CoinMarketCap:")
    cmc_result = processor._process_coinmarketcap(symbol)
    if cmc_result.error:
        print(f"   ‚ùå {cmc_result.error}")
    else:
        print(f"   ‚úÖ –î–∞–Ω–Ω—ã–µ –ø–æ–ª—É—á–µ–Ω—ã")
        print(
            f"   –û–±—ä–µ–º: ${cmc_result.current_volume_usdt:,.2f}" if cmc_result.current_volume_usdt else "   –û–±—ä–µ–º: None")
        print(f"   –¶–µ–Ω–∞: ${cmc_result.current_price_usdt:,.2f}" if cmc_result.current_price_usdt else "   –¶–µ–Ω–∞: None")


if __name__ == "__main__":
    # –û—Å–Ω–æ–≤–Ω–æ–π —Ç–µ—Å—Ç
    test_coinmarketcap_processing_and_save()

    # –î–µ—Ç–∞–ª—å–Ω—ã–π —Ç–µ—Å—Ç –¥–ª—è –ø—Ä–æ–±–ª–µ–º–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤
    print("\n\n" + "=" * 60)
    print("üîç –î–ï–¢–ê–õ–¨–ù–ê–Ø –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê")
    print("=" * 60)

    for symbol in ['KOMA', 'SKYAI']:
        test_specific_symbol(symbol)