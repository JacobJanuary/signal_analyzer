#!/usr/bin/env python3
"""Test CoinMarketCap integration with the working example."""
from api_clients.coinmarketcap_client import CoinMarketCapClient
from modules.spot_usdt_processor import SpotUSDTProcessor
from datetime import datetime, timezone


def test_cmc_direct():
    """Test CoinMarketCap API directly."""
    print("üîç –ü—Ä—è–º–æ–π —Ç–µ—Å—Ç CoinMarketCap API")
    print("=" * 60)

    cmc = CoinMarketCapClient()

    if not cmc.is_configured():
        print("‚ùå API –∫–ª—é—á –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω")
        return

    test_symbols = ['KOMA', 'SKYAI', 'BTC']

    for symbol in test_symbols:
        print(f"\nüìä –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ {symbol}:")
        print("-" * 40)

        # 1. –ü–æ–ª—É—á–∞–µ–º –º–∞–ø–ø–∏–Ω–≥ —Å–∏–º–≤–æ–ª–∞
        symbol_info = cmc.get_symbol_map(symbol)
        if symbol_info:
            print(f"‚úÖ –ù–∞–π–¥–µ–Ω: {symbol_info['name']} (ID: {symbol_info['id']})")
        else:
            print(f"‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω")
            continue

        # 2. –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω—é—é –∫–æ—Ç–∏—Ä–æ–≤–∫—É
        latest = cmc.get_latest_quote(symbol)
        if latest and 'quote' in latest and 'USD' in latest['quote']:
            usd = latest['quote']['USD']
            print(f"   –¶–µ–Ω–∞: ${usd.get('price', 0):.8f}")
            print(f"   –û–±—ä–µ–º 24h: ${usd.get('volume_24h', 0):,.2f}")
            print(f"   –ò–∑–º–µ–Ω–µ–Ω–∏–µ 24h: {usd.get('percent_change_24h', 0):.2f}%")

        # 3. –ü–æ–ª—É—á–∞–µ–º –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ
        market_data = cmc.get_market_data_for_symbol(symbol)
        if market_data:
            print(f"\nüìà –†—ã–Ω–æ—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ (30 –¥–Ω–µ–π):")
            print(f"   –°—Ä–µ–¥–Ω–∏–π –æ–±—ä–µ–º: ${market_data['avg_volume_usdt']:,.2f}")
            print(f"   –¢–µ–∫—É—â–∏–π –æ–±—ä–µ–º: ${market_data['current_volume_usdt']:,.2f}")
            print(f"   –í—á–µ—Ä–∞—à–Ω–∏–π –æ–±—ä–µ–º: ${market_data['yesterday_volume_usdt']:,.2f}")
            print(f"   –°—Ä–µ–¥–Ω—è—è —Ü–µ–Ω–∞: ${market_data['avg_price_usd']:.8f}")
            print(f"   –¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞: ${market_data['current_price_usd']:.8f}")
            print(f"   –¢–æ—á–µ–∫ –¥–∞–Ω–Ω—ã—Ö: {market_data['data_points']}")
        else:
            print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ä—ã–Ω–æ—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ")


def test_spot_processor():
    """Test spot processor with CoinMarketCap."""
    print("\n\nüîÑ –¢–µ—Å—Ç –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–∞ Spot USDT")
    print("=" * 60)

    processor = SpotUSDTProcessor()

    # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å–∏–º–≤–æ–ª—ã, –∫–æ—Ç–æ—Ä—ã–µ –¥–æ–ª–∂–Ω—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å CoinMarketCap
    test_cases = [
        ('KOMA', 'Should use CoinMarketCap'),
        ('SKYAI', 'Should use CoinMarketCap'),
        ('BTC', 'Should use Binance/Bybit first')
    ]

    for symbol, description in test_cases:
        print(f"\nüìä {symbol} - {description}:")
        print("-" * 40)

        result = processor.process_symbol(symbol)

        if result.error:
            print(f"‚ùå –û—à–∏–±–∫–∞: {result.error}")
        else:
            print(f"‚úÖ –ò—Å—Ç–æ—á–Ω–∏–∫: {result.source_exchange.value}")
            if result.avg_volume_usdt:
                print(f"   –°—Ä–µ–¥–Ω–∏–π –æ–±—ä–µ–º: ${result.avg_volume_usdt:,.2f}")
            if result.current_volume_usdt:
                print(f"   –¢–µ–∫—É—â–∏–π –æ–±—ä–µ–º: ${result.current_volume_usdt:,.2f}")
            if result.yesterday_volume_usdt:
                print(f"   –í—á–µ—Ä–∞—à–Ω–∏–π –æ–±—ä–µ–º: ${result.yesterday_volume_usdt:,.2f}")
            if result.volume_change_current_to_yesterday is not None:
                print(f"   –ò–∑–º–µ–Ω–µ–Ω–∏–µ –æ–±—ä–µ–º–∞ (–∫ –≤—á–µ—Ä–∞): {result.volume_change_current_to_yesterday:.2f}%")
            if result.current_price_usdt:
                print(f"   –¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞: ${result.current_price_usdt:.8f}")
            if result.price_change_24h is not None:
                print(f"   –ò–∑–º–µ–Ω–µ–Ω–∏–µ —Ü–µ–Ω—ã 24h: {result.price_change_24h:.2f}%")


def test_save_to_db():
    """Test saving CoinMarketCap data to database."""
    print("\n\nüíæ –¢–µ—Å—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ –ë–î")
    print("=" * 60)

    from database.models import EnrichedSignalData, signal_repository
    from database.connection import get_db_cursor

    # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π —Å–∏–≥–Ω–∞–ª
    symbol = 'KOMA'
    signal_id = None

    try:
        with get_db_cursor() as cursor:
            cursor.execute("""
                           INSERT INTO signals_10min (symbol, token_id)
                           VALUES (%s, %s)
                           """, (symbol, 1))
            signal_id = cursor.lastrowid
            print(f"‚úÖ –°–æ–∑–¥–∞–Ω —Ç–µ—Å—Ç–æ–≤—ã–π —Å–∏–≥–Ω–∞–ª ID: {signal_id}")

        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —á–µ—Ä–µ–∑ –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä
        processor = SpotUSDTProcessor()
        result = processor.process_symbol(symbol)

        if not result.error and result.source_exchange.value == 'coinmarketcap':
            print(f"‚úÖ –î–∞–Ω–Ω—ã–µ –ø–æ–ª—É—á–µ–Ω—ã –æ—Ç CoinMarketCap")

            # –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
            enriched = EnrichedSignalData(
                signal_id=signal_id,
                symbol=symbol,
                created_at=datetime.now(timezone.utc),
                spot_volume_usdt_average=result.avg_volume_usdt,
                spot_volume_usdt_current=result.current_volume_usdt,
                spot_volume_usdt_yesterday=result.yesterday_volume_usdt,
                spot_volume_usdt_change_current_to_yesterday=result.volume_change_current_to_yesterday,
                spot_volume_usdt_change_current_to_average=result.volume_change_current_to_average,
                spot_volume_source_usdt='coinmarketcap',
                spot_price_usdt_average=result.avg_price_usdt,
                spot_price_usdt_current=result.current_price_usdt,
                spot_price_usdt_yesterday=result.yesterday_price_usdt,
                spot_price_source_usdt='coinmarketcap'
            )

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º
            if signal_repository.save_enriched_data(enriched):
                print("‚úÖ –î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ –ë–î")

                # –ü—Ä–æ–≤–µ—Ä—è–µ–º
                with get_db_cursor() as cursor:
                    cursor.execute("""
                                   SELECT *FROM signals_10min_enriched
                                   WHERE signal_id = %s
                    """, (signal_id,))
                    saved = cursor.fetchone()

                    if saved and saved['spot_volume_source_usdt'] == 'coinmarketcap':
                        print("‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞: –¥–∞–Ω–Ω—ã–µ –æ—Ç CoinMarketCap —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
                        print(f"   –û–±—ä–µ–º: ${float(saved['spot_volume_usdt_current']):,.2f}")
                        print(f"   –¶–µ–Ω–∞: ${float(saved['spot_price_usdt_current']):.8f}")
            else:
                print("‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è")
        else:
            print(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –æ—Ç CoinMarketCap: {result.error}")

    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        import traceback
        traceback.print_exc()
    finally:
        # –û—á–∏—Å—Ç–∫–∞
        if signal_id:
            try:
                with get_db_cursor() as cursor:
                    cursor.execute("DELETE FROM signals_10min_enriched WHERE signal_id = %s", (signal_id,))
                    cursor.execute("DELETE FROM signals_10min WHERE id = %s", (signal_id,))
                    print("\n‚úÖ –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –æ—á–∏—â–µ–Ω—ã")
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ: {e}")


if __name__ == "__main__":
    print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å CoinMarketCap")
    print("=" * 60)

    # 1. –ü—Ä—è–º–æ–π —Ç–µ—Å—Ç API
    test_cmc_direct()

    # 2. –¢–µ—Å—Ç —á–µ—Ä–µ–∑ –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä
    test_spot_processor()

    # 3. –¢–µ—Å—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ –ë–î
    if input("\n\n–í—ã–ø–æ–ª–Ω–∏—Ç—å —Ç–µ—Å—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ –ë–î? (y/n): ").lower() == 'y':
        test_save_to_db()